[{"path":"/articles/Example_analysis.html","id":"load-r-packages","dir":"Articles","previous_headings":"","what":"Load R Packages","title":"Example_analysis","text":"","code":"using.packages <- c('reshape2','tidyverse','paletteer','readr','here')  mask.packages <- !using.packages %in% installed.packages() if (any(mask.packages)){   install.packages(using.packages[mask.packages],repos = \"http://cran.us.r-project.org\") }  # read in required packages lapply(c(using.packages), require, character.only = TRUE) #> Loading required package: reshape2 #> Loading required package: tidyverse #> Warning: package 'lubridate' was built under R version 4.3.2 #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.3     ✔ readr     2.1.4 #> ✔ forcats   1.0.0     ✔ stringr   1.5.0 #> ✔ ggplot2   3.4.3     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.3     ✔ tidyr     1.3.0 #> ✔ purrr     1.0.2 #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors #> Loading required package: paletteer #>  #> Loading required package: here #>  #> here() starts at C:/Users/zono2/OneDrive/Documents/R projects/2nd_term_statistical_programming_projects/Project_3/reshape #> [[1]] #> [1] TRUE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] TRUE #>  #> [[4]] #> [1] TRUE #>  #> [[5]] #> [1] TRUE"},{"path":"/articles/Example_analysis.html","id":"data-and-question","dir":"Articles","previous_headings":"","what":"Data and Question","title":"Example_analysis","text":"example analysis, going use Dog Breeds dataset tidytuesday. interested finding breed dog favored traits makes desirable others. Link original data: https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-02-01/readme.md Data Dictionary: https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-02-01/readme.md#data-dictionary","code":""},{"path":"/articles/Example_analysis.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load Data","title":"Example_analysis","text":"","code":"# tests if a directory named \"data\" exists locally if (!dir.exists(here(\"data\"))) {   dir.create(here(\"data\")) }  rda_files <- c('breed_traits.rda','breed_rank_all.rda') ## Check whether we have all data files if (any(!file.exists(here(\"data\", rda_files)))) {   ## If we don't, then download the data   breed_traits <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-02-01/breed_traits.csv')   breed_rank_all <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-02-01/breed_rank.csv')      ## Then save the data objects to rda files   save(breed_traits, file = here(\"data\", \"breed_traits.rda\"))   save(breed_rank_all, file = here(\"data\", \"breed_rank_all.rda\")) }   load(file = here(\"data\", \"breed_traits.rda\")) load(file = here(\"data\", \"breed_rank_all.rda\"))  # Fix space in breed_traits breed_traits <- breed_traits %>%   mutate(Breed = str_replace_all(Breed,'[[:space:]]',' '))"},{"path":"/articles/Example_analysis.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"Example_analysis","text":"Clear unrelated columns rank dataset utilize melt() function reshape2 package convert rank dataset long format. calculate rank sum converted rank dataset plot , visualize top 10 dogs smallest rank sum (top ranked) examine rank change years.  top ranked dogs pretty stable ranking. However, dogs like Beagles Yorkshire Terriers display steady decline ranking. French Bulldog shows notable ranking increase. Since wish work numerical values trait score data, need find column numeric. use dcast() function reshape2 package convert long data back wide form better visualization. Now interested seeing mean trait scores shared top ranked dogs change year. Higher scored traits desirable. Lower scored traits less desirable.  can see top four desirable traits involve friendliness within family ease keeping pet. define top desirable traits : Affectionate Family, Good Young Children, Trainability Level, Adaptability Level. Conversely, define collection less desirable traits lower scores among top ranked dogs : Shedding Level, Barking Level, Coat Grooming Frequency, Drooling Level. traits associated cleaning difficulty possible noise concerns house. manipulate data table calculate mean scores two categories dogs. can plot scatter plot visualize association mean trait score log rank sum.  can see plot, can conclude highly ranked dogs near perfect scores top desirable traits might lowest scores less desirable traits. summary, favorable dog breed house pet least friendly behaviors troublesome groom clean.","code":"breed_rank_all_df <- breed_rank_all %>%    select(!c(links,Image)) breed_rank_all_df #> # A tibble: 195 × 9 #>    Breed `2013 Rank` `2014 Rank` `2015 Rank` `2016 Rank` `2017 Rank` `2018 Rank` #>    <chr>       <dbl>       <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #>  1 Retr…           1           1           1           1           1           1 #>  2 Fren…          11           9           6           6           4           4 #>  3 Germ…           2           2           2           2           2           2 #>  4 Retr…           3           3           3           3           3           3 #>  5 Bull…           5           4           4           4           5           5 #>  6 Pood…           8           7           8           7           7           7 #>  7 Beag…           4           5           5           5           6           6 #>  8 Rott…           9          10           9           8           8           8 #>  9 Poin…          13          12          11          11          10           9 #> 10 Dach…          10          11          13          13          13          12 #> # ℹ 185 more rows #> # ℹ 2 more variables: `2019 Rank` <dbl>, `2020 Rank` <dbl> long_brt <- breed_rank_all_df %>%   melt(id.vars = 'Breed') long_brt <- long_brt %>%   mutate(variable = str_extract(variable, '[0-9]+')) %>%   mutate(variable = map_dbl(variable,as.numeric)) %>%   rename(year = variable, rank = value) as_tibble(long_brt) #> # A tibble: 1,560 × 3 #>    Breed                          year  rank #>    <chr>                         <dbl> <dbl> #>  1 Retrievers (Labrador)          2013     1 #>  2 French Bulldogs                2013    11 #>  3 German Shepherd Dogs           2013     2 #>  4 Retrievers (Golden)            2013     3 #>  5 Bulldogs                       2013     5 #>  6 Poodles                        2013     8 #>  7 Beagles                        2013     4 #>  8 Rottweilers                    2013     9 #>  9 Pointers (German Shorthaired)  2013    13 #> 10 Dachshunds                     2013    10 #> # ℹ 1,550 more rows rank_sum <- long_brt %>%   summarise(mean_rank = mean(rank), rank_sum = sum(rank),.by=Breed) %>%   arrange(rank_sum)  top10 <- head(rank_sum$Breed,n=10) as_tibble(rank_sum) #> # A tibble: 195 × 3 #>    Breed                         mean_rank rank_sum #>    <chr>                             <dbl>    <dbl> #>  1 Retrievers (Labrador)              1           8 #>  2 German Shepherd Dogs               2.12       17 #>  3 Retrievers (Golden)                3.12       25 #>  4 Bulldogs                           4.62       37 #>  5 Beagles                            5.62       45 #>  6 French Bulldogs                    5.75       46 #>  7 Poodles                            7          56 #>  8 Rottweilers                        8.5        68 #>  9 Yorkshire Terriers                 9          72 #> 10 Pointers (German Shorthaired)     10.5        84 #> # ℹ 185 more rows color_pal <- paletteer_d(\"ggsci::category10_d3\") long_brt %>%    filter(Breed %in% top10) %>%    mutate(Breed = fct_relevel(Breed,top10)) %>%   ggplot(aes(x = year, y = rank, group = Breed, fill = Breed)) +     geom_point(aes(color = Breed)) +     geom_line(aes(color = Breed)) +     # scale_colour_discrete()     scale_color_manual(values= as.character(color_pal)) +      scale_y_reverse() +     # Adjust text style     labs(title = 'Top 10 Ranked Dogs Over Years',          subtitle = 'Most top ranked dogs maintain stable rank. A few dogs display steady trend of change',          caption = 'Shu Luan') # check if the scores are all numerical values not_num <- names(which(!map_lgl(.x = breed_traits, .f = is.numeric))) not_num #> [1] \"Breed\"       \"Coat Type\"   \"Coat Length\" top10_trait_mean <- long_brt %>%    filter(rank <= 10) %>%    left_join(breed_traits, by = 'Breed') %>%    group_by(year) %>%   select(!c(Breed,rank,`Coat Type`,`Coat Length`)) %>%   summarise_at(vars(`Affectionate With Family`:`Mental Stimulation Needs`), list(mean = mean)) %>%    melt(id.vars ='year') %>%   mutate(variable = str_replace_all(variable,'_mean','')) %>%    rename(Trait = variable, Mean_score = value) %>%   arrange(desc(Mean_score))  top10_trait_mean <- top10_trait_mean %>%   mutate(Trait = fct_relevel(Trait, unique(top10_trait_mean$Trait))) as_tibble(dcast(top10_trait_mean, year~Trait)) # use dcast to convert the long data to wide format #> Using Mean_score as value column: use value.var to override. #> # A tibble: 8 × 15 #>    year `Affectionate With Family` Good With Young Childr…¹ `Trainability Level` #>   <dbl>                      <dbl>                    <dbl>                <dbl> #> 1  2013                        4.6                      4.4                  4.4 #> 2  2014                        4.6                      4.6                  4.4 #> 3  2015                        4.6                      4.6                  4.4 #> 4  2016                        4.6                      4.6                  4.4 #> 5  2017                        4.7                      4.6                  4.5 #> 6  2018                        4.7                      4.6                  4.5 #> 7  2019                        4.7                      4.4                  4.5 #> 8  2020                        4.7                      4.4                  4.5 #> # ℹ abbreviated name: ¹​`Good With Young Children` #> # ℹ 11 more variables: `Adaptability Level` <dbl>, `Playfulness Level` <dbl>, #> #   `Openness To Strangers` <dbl>, `Mental Stimulation Needs` <dbl>, #> #   `Good With Other Dogs` <dbl>, `Watchdog/Protective Nature` <dbl>, #> #   `Energy Level` <dbl>, `Shedding Level` <dbl>, `Barking Level` <dbl>, #> #   `Coat Grooming Frequency` <dbl>, `Drooling Level` <dbl> top10_trait_mean %>% ggplot(aes(fill = Trait))+   geom_col(aes(x=year,y=Mean_score))+   facet_wrap(.~Trait) +   xlab('Year') +   labs(title = 'Mean score of each trait in top 10 dogs of each year',        subtitle = 'Friendly traits are more welcomed while difficulties in grooming are less desirable.',        caption = 'Shu Luan') +   theme(strip.text=element_text(face='bold'),legend.position=\"none\") rank_df <- rank_sum %>%    left_join(breed_traits,by='Breed') %>%   select(!c(`Coat Type`,`Coat Length`)) %>%    filter(!is.na(rank_sum)) as_tibble(rank_df) #> # A tibble: 175 × 17 #>    Breed        mean_rank rank_sum Affectionate With Fa…¹ Good With Young Chil…² #>    <chr>            <dbl>    <dbl>                  <dbl>                  <dbl> #>  1 Retrievers …      1           8                      5                      5 #>  2 German Shep…      2.12       17                      5                      5 #>  3 Retrievers …      3.12       25                      5                      5 #>  4 Bulldogs          4.62       37                      4                      3 #>  5 Beagles           5.62       45                      3                      5 #>  6 French Bull…      5.75       46                      5                      5 #>  7 Poodles           7          56                      5                      5 #>  8 Rottweilers       8.5        68                      5                      3 #>  9 Yorkshire T…      9          72                      5                      5 #> 10 Pointers (G…     10.5        84                      5                      5 #> # ℹ 165 more rows #> # ℹ abbreviated names: ¹​`Affectionate With Family`, ²​`Good With Young Children` #> # ℹ 12 more variables: `Good With Other Dogs` <dbl>, `Shedding Level` <dbl>, #> #   `Coat Grooming Frequency` <dbl>, `Drooling Level` <dbl>, #> #   `Openness To Strangers` <dbl>, `Playfulness Level` <dbl>, #> #   `Watchdog/Protective Nature` <dbl>, `Adaptability Level` <dbl>, #> #   `Trainability Level` <dbl>, `Energy Level` <dbl>, `Barking Level` <dbl>, … rank_trait_score <- rank_df %>%   mutate(top_desirable = rowMeans(rank_df[,c('Affectionate With Family','Good With Young Children','Trainability Level','Adaptability Level')])) %>%    mutate(less_desirable = rowMeans(rank_df[,c('Shedding Level','Coat Grooming Frequency','Drooling Level','Barking Level')])) %>%   mutate(log_rank_sum = log(rank_sum)) %>%   select(c(top_desirable,less_desirable,log_rank_sum)) %>%   melt(id.vars = 'log_rank_sum') as_tibble(rank_trait_score) #> # A tibble: 350 × 3 #>    log_rank_sum variable      value #>           <dbl> <fct>         <dbl> #>  1         2.08 top_desirable  5    #>  2         2.83 top_desirable  5    #>  3         3.22 top_desirable  5    #>  4         3.61 top_desirable  3.5  #>  5         3.81 top_desirable  3.75 #>  6         3.83 top_desirable  4.75 #>  7         4.03 top_desirable  4.75 #>  8         4.22 top_desirable  4.25 #>  9         4.28 top_desirable  4.75 #> 10         4.43 top_desirable  4.75 #> # ℹ 340 more rows rank_trait_score %>%   rename(Mean_score = value, Trait_type = variable) %>%   ggplot(aes(y = Mean_score, x = log_rank_sum, group = Trait_type, color = Trait_type)) +     geom_point() +     xlab('Log rank sum') +     ylab('Mean trait scores') +      labs(title = 'Mean trait score association with log rank sum',        subtitle = 'Lower rank sum (top ranked) dogs have near perfect desirable trait scores, \\nwhile higher rank sum dogs have more variable trait scores.',        caption = 'Shu Luan')"},{"path":"/articles/Example_analysis.html","id":"functions-used","dir":"Articles","previous_headings":"","what":"Functions used","title":"Example_analysis","text":"tidyverse: select, rename, filter, summarise, arrange, mutate, str_extract, str_replace ggplot2: geom_col, geom_point, geom_line, facet_wrap() purr: map_dbl, map_lgl reshape2: melt, dcast","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hadley Wickham. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hadley Wickham (2007). Reshaping Data reshape Package. Journal Statistical Software, 21(12), 1-20. URL http://www.jstatsoft.org/v21/i12/.","code":"@Article{,   title = {Reshaping Data with the {reshape} Package},   author = {Hadley Wickham},   journal = {Journal of Statistical Software},   year = {2007},   volume = {21},   number = {12},   pages = {1--20},   url = {http://www.jstatsoft.org/v21/i12/}, }"},{"path":[]},{"path":"/index.html","id":"assignment-info","dir":"","previous_headings":"","what":"Assignment Info","title":"Flexibly Reshape Data: A Reboot of the Reshape Package","text":"Link original github repo reshape2 package: https://github.com/hadley/reshape/ Link deployed website: https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-sluan-jh/ Website customizations: Changed website theme flatly Changed code chunk theme breeze-light Changed code background color #404040 Changed base font ‘Inter’ Added footnote end Rearranged navigation bar order","code":""},{"path":"/index.html","id":"status","dir":"","previous_headings":"","what":"Status","title":"Flexibly Reshape Data: A Reboot of the Reshape Package","text":"reshape2 superseded: changes necessary keep CRAN made. recommend using tidyr instead.","code":""},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Flexibly Reshape Data: A Reboot of the Reshape Package","text":"Reshape2 reboot reshape package. ’s five years since first release reshape, time ’ve learned tremendous amount R programming, work data R. Reshape2 uses knowledge make new package reshaping data much focused much much faster. version improves speed cost functionality, renamed reshape2 avoid causing problems existing users. Based user feedback may reintroduce features. ’s new reshape2: considerably faster memory efficient thanks much better underlying algorithm uses power speed subsetting fullest extent, cases making single copy data. cast replaced two functions depending output type: dcast produces data frames, acast produces matrices/arrays. multidimensional margins now possible: grand_row grand_col dropped: now name margin refers variable value set (). features removed | cast operator, ability return multiple values aggregation function. ’m reasonably sure operations better performed plyr. new cast syntax allows reshape based functions variables (based underlying syntax plyr): better development practices like namespaces tests. function melt now names columns returned data frame Var1, Var2, …, VarN instead X1, X2, …, XN. argument variable.name melt replaces old argument variable_name. Initial benchmarking shown melt 10x faster, pure reshaping cast 100x faster, aggregating cast() 10x faster. work generously supported BD (Becton Dickinson).","code":""},{"path":"/reference/add_margins.html","id":null,"dir":"Reference","previous_headings":"","what":"Add margins to a data frame. — add_margins","title":"Add margins to a data frame. — add_margins","text":"Rownames silently stripped. margining variables converted factors.","code":""},{"path":"/reference/add_margins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add margins to a data frame. — add_margins","text":"","code":"add_margins(df, vars, margins = TRUE)"},{"path":"/reference/add_margins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add margins to a data frame. — add_margins","text":"df input data frame vars list character vectors giving variables dimension margins character vector variable names compute margins . TRUE compute possible margins.","code":""},{"path":"/reference/cast.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast functions\r\nCast a molten data frame into an array or data frame. — cast","title":"Cast functions\r\nCast a molten data frame into an array or data frame. — cast","text":"Use acast dcast depending whether want vector/matrix/array output data frame output.  Data frames can two dimensions.","code":""},{"path":"/reference/cast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast functions\r\nCast a molten data frame into an array or data frame. — cast","text":"","code":"dcast(   data,   formula,   fun.aggregate = NULL,   ...,   margins = NULL,   subset = NULL,   fill = NULL,   drop = TRUE,   value.var = guess_value(data) )  acast(   data,   formula,   fun.aggregate = NULL,   ...,   margins = NULL,   subset = NULL,   fill = NULL,   drop = TRUE,   value.var = guess_value(data) )"},{"path":"/reference/cast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast functions\r\nCast a molten data frame into an array or data frame. — cast","text":"data molten data frame, see melt. formula casting formula, see details specifics. fun.aggregate aggregation function needed variables identify single observation output cell.  Defaults length (message) needed specified. ... arguments passed aggregating function margins vector variable names (can include \"grand\\_col\" \"grand\\_row\") compute margins , TRUE compute margins . variables can margined silently dropped. subset quoted expression used subset data prior reshaping, e.g. subset = .(variable==\"length\"). fill value fill structural missings, defaults value applying fun.aggregate 0 length vector drop missing combinations dropped kept? value.var name column stores values, see guess_value default strategies figure .","code":""},{"path":"/reference/cast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cast functions\r\nCast a molten data frame into an array or data frame. — cast","text":"cast formula following format: x_variable + x_2 ~ y_variable + y_2 ~ z_variable ~  ...  order variables makes difference.  first varies slowest, last fastest.  couple special variables: \"...\" represents variables used formula \".\" represents variable, can formula = var1 ~ .. Alternatively, can supply list quoted expressions, form list(.(x_variable, x_2), .(y_variable, y_2), .(z)).  advantage form can cast based transformations variables: list(.(+ b), (c = round(c))).  See documentation . details alternative formats. combination variables supply uniquely identify one row original data set, need supply aggregating function, fun.aggregate. function take vector numbers return single summary statistic.","code":""},{"path":[]},{"path":"/reference/cast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cast functions\r\nCast a molten data frame into an array or data frame. — cast","text":"","code":"#Air quality example names(airquality) <- tolower(names(airquality)) aqm <- melt(airquality, id=c(\"month\", \"day\"), na.rm=TRUE)  acast(aqm, day ~ month ~ variable) #> , , ozone #>  #>      5  6   7   8  9 #> 1   41 NA 135  39 96 #> 2   36 NA  49   9 78 #> 3   12 NA  32  16 73 #> 4   18 NA  NA  78 91 #> 5   NA NA  64  35 47 #> 6   28 NA  40  66 32 #> 7   23 29  77 122 20 #> 8   19 NA  97  89 23 #> 9    8 71  97 110 21 #> 10  NA 39  85  NA 24 #> 11   7 NA  NA  NA 44 #> 12  16 NA  10  44 21 #> 13  11 23  27  28 28 #> 14  14 NA  NA  65  9 #> 15  18 NA   7  NA 13 #> 16  14 21  48  22 46 #> 17  34 37  35  59 18 #> 18   6 20  61  23 13 #> 19  30 12  79  31 24 #> 20  11 13  63  44 16 #> 21   1 NA  16  21 13 #> 22  11 NA  NA   9 23 #> 23   4 NA  NA  NA 36 #> 24  32 NA  80  45  7 #> 25  NA NA 108 168 14 #> 26  NA NA  20  73 30 #> 27  NA NA  52  NA NA #> 28  23 NA  82  76 14 #> 29  45 NA  50 118 18 #> 30 115 NA  64  84 20 #> 31  37 NA  59  85 NA #>  #> , , solar.r #>  #>      5   6   7   8   9 #> 1  190 286 269  83 167 #> 2  118 287 248  24 197 #> 3  149 242 236  77 183 #> 4  313 186 101  NA 189 #> 5   NA 220 175  NA  95 #> 6   NA 264 314  NA  92 #> 7  299 127 276 255 252 #> 8   99 273 267 229 220 #> 9   19 291 272 207 230 #> 10 194 323 175 222 259 #> 11  NA 259 139 137 236 #> 12 256 250 264 192 259 #> 13 290 148 175 273 238 #> 14 274 332 291 157  24 #> 15  65 322  48  64 112 #> 16 334 191 260  71 237 #> 17 307 284 274  51 224 #> 18  78  37 285 115  27 #> 19 322 120 187 244 238 #> 20  44 137 220 190 201 #> 21   8 150   7 259 238 #> 22 320  59 258  36  14 #> 23  25  91 295 255 139 #> 24  92 250 294 212  49 #> 25  66 135 223 238  20 #> 26 266 127  81 215 193 #> 27  NA  47  82 153 145 #> 28  13  98 213 203 191 #> 29 252  31 275 225 131 #> 30 223 138 253 237 223 #> 31 279  NA 254 188  NA #>  #> , , wind #>  #>       5    6    7    8    9 #> 1   7.4  8.6  4.1  6.9  6.9 #> 2   8.0  9.7  9.2 13.8  5.1 #> 3  12.6 16.1  9.2  7.4  2.8 #> 4  11.5  9.2 10.9  6.9  4.6 #> 5  14.3  8.6  4.6  7.4  7.4 #> 6  14.9 14.3 10.9  4.6 15.5 #> 7   8.6  9.7  5.1  4.0 10.9 #> 8  13.8  6.9  6.3 10.3 10.3 #> 9  20.1 13.8  5.7  8.0 10.9 #> 10  8.6 11.5  7.4  8.6  9.7 #> 11  6.9 10.9  8.6 11.5 14.9 #> 12  9.7  9.2 14.3 11.5 15.5 #> 13  9.2  8.0 14.9 11.5  6.3 #> 14 10.9 13.8 14.9  9.7 10.9 #> 15 13.2 11.5 14.3 11.5 11.5 #> 16 11.5 14.9  6.9 10.3  6.9 #> 17 12.0 20.7 10.3  6.3 13.8 #> 18 18.4  9.2  6.3  7.4 10.3 #> 19 11.5 11.5  5.1 10.9 10.3 #> 20  9.7 10.3 11.5 10.3  8.0 #> 21  9.7  6.3  6.9 15.5 12.6 #> 22 16.6  1.7  9.7 14.3  9.2 #> 23  9.7  4.6 11.5 12.6 10.3 #> 24 12.0  6.3  8.6  9.7 10.3 #> 25 16.6  8.0  8.0  3.4 16.6 #> 26 14.9  8.0  8.6  8.0  6.9 #> 27  8.0 10.3 12.0  5.7 13.2 #> 28 12.0 11.5  7.4  9.7 14.3 #> 29 14.9 14.9  7.4  2.3  8.0 #> 30  5.7  8.0  7.4  6.3 11.5 #> 31  7.4   NA  9.2  6.3   NA #>  #> , , temp #>  #>     5  6  7  8  9 #> 1  67 78 84 81 91 #> 2  72 74 85 81 92 #> 3  74 67 81 82 93 #> 4  62 84 84 86 93 #> 5  56 85 83 85 87 #> 6  66 79 83 87 84 #> 7  65 82 88 89 80 #> 8  59 87 92 90 78 #> 9  61 90 92 90 75 #> 10 69 87 89 92 73 #> 11 74 93 82 86 81 #> 12 69 92 73 86 76 #> 13 66 82 81 82 77 #> 14 68 80 91 80 71 #> 15 58 79 80 79 71 #> 16 64 77 81 77 78 #> 17 66 72 82 79 67 #> 18 57 65 84 76 76 #> 19 68 73 87 78 68 #> 20 62 76 85 78 82 #> 21 59 77 74 77 64 #> 22 73 76 81 72 71 #> 23 61 76 82 75 81 #> 24 61 76 86 79 69 #> 25 57 75 85 81 63 #> 26 58 78 82 86 70 #> 27 57 73 86 88 77 #> 28 67 80 88 97 75 #> 29 81 77 86 94 76 #> 30 79 83 83 96 68 #> 31 76 NA 81 94 NA #>  acast(aqm, month ~ variable, mean) #>      ozone  solar.r      wind     temp #> 5 23.61538 181.2963 11.622581 65.54839 #> 6 29.44444 190.1667 10.266667 79.10000 #> 7 59.11538 216.4839  8.941935 83.90323 #> 8 59.96154 171.8571  8.793548 83.96774 #> 9 31.44828 167.4333 10.180000 76.90000 acast(aqm, month ~ variable, mean, margins = TRUE) #>          ozone  solar.r      wind     temp    (all) #> 5     23.61538 181.2963 11.622581 65.54839 68.70696 #> 6     29.44444 190.1667 10.266667 79.10000 87.38384 #> 7     59.11538 216.4839  8.941935 83.90323 93.49748 #> 8     59.96154 171.8571  8.793548 83.96774 79.71207 #> 9     31.44828 167.4333 10.180000 76.90000 71.82689 #> (all) 42.12931 185.9315  9.957516 77.88235 80.05722 dcast(aqm, month ~ variable, mean, margins = c(\"month\", \"variable\")) #>   month    ozone  solar.r      wind     temp    (all) #> 1     5 23.61538 181.2963 11.622581 65.54839 68.70696 #> 2     6 29.44444 190.1667 10.266667 79.10000 87.38384 #> 3     7 59.11538 216.4839  8.941935 83.90323 93.49748 #> 4     8 59.96154 171.8571  8.793548 83.96774 79.71207 #> 5     9 31.44828 167.4333 10.180000 76.90000 71.82689 #> 6 (all) 42.12931 185.9315  9.957516 77.88235 80.05722  library(plyr) # needed to access . function acast(aqm, variable ~ month, mean, subset = .(variable == \"ozone\")) #>              5        6        7        8        9 #> ozone 23.61538 29.44444 59.11538 59.96154 31.44828 acast(aqm, variable ~ month, mean, subset = .(month == 5)) #>                 5 #> ozone    23.61538 #> solar.r 181.29630 #> wind     11.62258 #> temp     65.54839  #Chick weight example names(ChickWeight) <- tolower(names(ChickWeight)) chick_m <- melt(ChickWeight, id=2:4, na.rm=TRUE)  dcast(chick_m, time ~ variable, mean) # average effect of time #>    time    weight #> 1     0  41.06000 #> 2     2  49.22000 #> 3     4  59.95918 #> 4     6  74.30612 #> 5     8  91.24490 #> 6    10 107.83673 #> 7    12 129.24490 #> 8    14 143.81250 #> 9    16 168.08511 #> 10   18 190.19149 #> 11   20 209.71739 #> 12   21 218.68889 dcast(chick_m, diet ~ variable, mean) # average effect of diet #>   diet   weight #> 1    1 102.6455 #> 2    2 122.6167 #> 3    3 142.9500 #> 4    4 135.2627 acast(chick_m, diet ~ time, mean) # average effect of diet & time #>      0     2        4        6         8        10       12       14       16 #> 1 41.4 47.25 56.47368 66.78947  79.68421  93.05263 108.5263 123.3889 144.6471 #> 2 40.7 49.40 59.80000 75.40000  91.70000 108.50000 131.3000 141.9000 164.7000 #> 3 40.8 50.40 62.20000 77.90000  98.40000 117.10000 144.4000 164.5000 197.4000 #> 4 41.0 51.80 64.50000 83.90000 105.60000 126.00000 151.4000 161.8000 182.0000 #>         18       20       21 #> 1 158.9412 170.4118 177.7500 #> 2 187.7000 205.6000 214.7000 #> 3 233.1000 258.9000 270.3000 #> 4 202.9000 233.8889 238.5556  # How many chicks at each time? - checking for balance acast(chick_m, time ~ diet, length) #>     1  2  3  4 #> 0  20 10 10 10 #> 2  20 10 10 10 #> 4  19 10 10 10 #> 6  19 10 10 10 #> 8  19 10 10 10 #> 10 19 10 10 10 #> 12 19 10 10 10 #> 14 18 10 10 10 #> 16 17 10 10 10 #> 18 17 10 10 10 #> 20 17 10 10  9 #> 21 16 10 10  9 acast(chick_m, chick ~ time, mean) #>     0  2   4   6   8  10  12  14  16  18  20  21 #> 18 39 35 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN #> 16 41 45  49  51  57  51  54 NaN NaN NaN NaN NaN #> 15 41 49  56  64  68  68  67  68 NaN NaN NaN NaN #> 13 41 48  53  60  65  67  71  70  71  81  91  96 #> 9  42 51  59  68  85  96  90  92  93 100 100  98 #> 20 41 47  54  58  65  73  77  89  98 107 115 117 #> 10 41 44  52  63  74  81  89  96 101 112 120 124 #> 8  42 50  61  71  84  93 110 116 126 134 125 NaN #> 17 42 51  61  72  83  89  98 103 113 123 133 142 #> 19 43 48  55  62  65  71  82  88 106 120 144 157 #> 4  42 49  56  67  74  87 102 108 136 154 160 157 #> 6  41 49  59  74  97 124 141 148 155 160 160 157 #> 11 43 51  63  84 112 139 168 177 182 184 181 175 #> 3  43 39  55  67  84  99 115 138 163 187 198 202 #> 1  42 51  59  64  76  93 106 125 149 171 199 205 #> 12 41 49  56  62  72  88 119 135 162 185 195 205 #> 2  40 49  58  72  84 103 122 138 162 187 209 215 #> 5  41 42  48  60  79 106 141 164 197 199 220 223 #> 14 41 49  62  79 101 128 164 192 227 248 259 266 #> 7  41 49  57  71  89 112 146 174 218 250 288 305 #> 24 42 52  58  74  66  68  70  71  72  72  76  74 #> 30 42 48  59  72  85  98 115 122 143 151 157 150 #> 22 41 55  64  77  90  95 108 111 131 148 164 167 #> 23 43 52  61  73  90 103 127 135 145 163 170 175 #> 27 39 46  58  73  87 100 115 123 144 163 185 192 #> 28 39 46  58  73  92 114 145 156 184 207 212 233 #> 26 42 48  57  74  93 114 136 147 169 205 236 251 #> 25 40 49  62  78 102 124 146 164 197 231 259 265 #> 29 39 48  59  74  87 106 134 150 187 230 279 309 #> 21 40 50  62  86 125 163 217 240 275 307 318 331 #> 33 39 50  63  77  96 111 137 144 151 146 156 147 #> 37 41 48  56  68  80  83 103 112 135 157 169 178 #> 36 39 48  61  76  98 116 145 166 198 227 225 220 #> 31 42 53  62  73  85 102 123 138 170 204 235 256 #> 39 42 50  61  78  89 109 130 146 170 214 250 272 #> 38 41 49  61  74  98 109 128 154 192 232 280 290 #> 32 41 49  65  82 107 129 159 179 221 263 291 305 #> 40 41 55  66  79 101 120 154 182 215 262 295 321 #> 34 41 49  63  85 107 134 164 186 235 294 327 341 #> 35 41 53  64  87 123 158 201 238 287 332 361 373 #> 44 42 51  65  86 103 118 127 138 145 146 NaN NaN #> 45 41 50  61  78  98 117 135 141 147 174 197 196 #> 43 42 55  69  96 131 157 184 188 197 198 199 200 #> 41 42 51  66  85 103 124 155 153 175 184 199 204 #> 47 41 53  66  79 100 123 148 157 168 185 210 205 #> 49 40 53  64  85 108 128 152 166 184 203 233 237 #> 46 40 52  62  82 101 120 144 156 173 210 231 238 #> 50 41 54  67  84 105 122 155 175 205 234 264 264 #> 42 42 49  63  84 103 126 160 174 204 234 269 281 #> 48 39 50  62  80 104 125 154 170 222 261 303 322 acast(chick_m, chick ~ time, mean, subset = .(time < 10 & chick < 20)) #>     0  2   4   6   8 #> 18 39 35 NaN NaN NaN #> 16 41 45  49  51  57 #> 15 41 49  56  64  68 #> 13 41 48  53  60  65 #> 9  42 51  59  68  85  acast(chick_m, time ~ diet, length) #>     1  2  3  4 #> 0  20 10 10 10 #> 2  20 10 10 10 #> 4  19 10 10 10 #> 6  19 10 10 10 #> 8  19 10 10 10 #> 10 19 10 10 10 #> 12 19 10 10 10 #> 14 18 10 10 10 #> 16 17 10 10 10 #> 18 17 10 10 10 #> 20 17 10 10  9 #> 21 16 10 10  9  dcast(chick_m, diet + chick ~ time) #>    diet chick  0  2  4  6   8  10  12  14  16  18  20  21 #> 1     1    18 39 35 NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 2     1    16 41 45 49 51  57  51  54  NA  NA  NA  NA  NA #> 3     1    15 41 49 56 64  68  68  67  68  NA  NA  NA  NA #> 4     1    13 41 48 53 60  65  67  71  70  71  81  91  96 #> 5     1     9 42 51 59 68  85  96  90  92  93 100 100  98 #> 6     1    20 41 47 54 58  65  73  77  89  98 107 115 117 #> 7     1    10 41 44 52 63  74  81  89  96 101 112 120 124 #> 8     1     8 42 50 61 71  84  93 110 116 126 134 125  NA #> 9     1    17 42 51 61 72  83  89  98 103 113 123 133 142 #> 10    1    19 43 48 55 62  65  71  82  88 106 120 144 157 #> 11    1     4 42 49 56 67  74  87 102 108 136 154 160 157 #> 12    1     6 41 49 59 74  97 124 141 148 155 160 160 157 #> 13    1    11 43 51 63 84 112 139 168 177 182 184 181 175 #> 14    1     3 43 39 55 67  84  99 115 138 163 187 198 202 #> 15    1     1 42 51 59 64  76  93 106 125 149 171 199 205 #> 16    1    12 41 49 56 62  72  88 119 135 162 185 195 205 #> 17    1     2 40 49 58 72  84 103 122 138 162 187 209 215 #> 18    1     5 41 42 48 60  79 106 141 164 197 199 220 223 #> 19    1    14 41 49 62 79 101 128 164 192 227 248 259 266 #> 20    1     7 41 49 57 71  89 112 146 174 218 250 288 305 #> 21    2    24 42 52 58 74  66  68  70  71  72  72  76  74 #> 22    2    30 42 48 59 72  85  98 115 122 143 151 157 150 #> 23    2    22 41 55 64 77  90  95 108 111 131 148 164 167 #> 24    2    23 43 52 61 73  90 103 127 135 145 163 170 175 #> 25    2    27 39 46 58 73  87 100 115 123 144 163 185 192 #> 26    2    28 39 46 58 73  92 114 145 156 184 207 212 233 #> 27    2    26 42 48 57 74  93 114 136 147 169 205 236 251 #> 28    2    25 40 49 62 78 102 124 146 164 197 231 259 265 #> 29    2    29 39 48 59 74  87 106 134 150 187 230 279 309 #> 30    2    21 40 50 62 86 125 163 217 240 275 307 318 331 #> 31    3    33 39 50 63 77  96 111 137 144 151 146 156 147 #> 32    3    37 41 48 56 68  80  83 103 112 135 157 169 178 #> 33    3    36 39 48 61 76  98 116 145 166 198 227 225 220 #> 34    3    31 42 53 62 73  85 102 123 138 170 204 235 256 #> 35    3    39 42 50 61 78  89 109 130 146 170 214 250 272 #> 36    3    38 41 49 61 74  98 109 128 154 192 232 280 290 #> 37    3    32 41 49 65 82 107 129 159 179 221 263 291 305 #> 38    3    40 41 55 66 79 101 120 154 182 215 262 295 321 #> 39    3    34 41 49 63 85 107 134 164 186 235 294 327 341 #> 40    3    35 41 53 64 87 123 158 201 238 287 332 361 373 #> 41    4    44 42 51 65 86 103 118 127 138 145 146  NA  NA #> 42    4    45 41 50 61 78  98 117 135 141 147 174 197 196 #> 43    4    43 42 55 69 96 131 157 184 188 197 198 199 200 #> 44    4    41 42 51 66 85 103 124 155 153 175 184 199 204 #> 45    4    47 41 53 66 79 100 123 148 157 168 185 210 205 #> 46    4    49 40 53 64 85 108 128 152 166 184 203 233 237 #> 47    4    46 40 52 62 82 101 120 144 156 173 210 231 238 #> 48    4    50 41 54 67 84 105 122 155 175 205 234 264 264 #> 49    4    42 42 49 63 84 103 126 160 174 204 234 269 281 #> 50    4    48 39 50 62 80 104 125 154 170 222 261 303 322 acast(chick_m, diet + chick ~ time) #>       0  2  4  6   8  10  12  14  16  18  20  21 #> 1_18 39 35 NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 1_16 41 45 49 51  57  51  54  NA  NA  NA  NA  NA #> 1_15 41 49 56 64  68  68  67  68  NA  NA  NA  NA #> 1_13 41 48 53 60  65  67  71  70  71  81  91  96 #> 1_9  42 51 59 68  85  96  90  92  93 100 100  98 #> 1_20 41 47 54 58  65  73  77  89  98 107 115 117 #> 1_10 41 44 52 63  74  81  89  96 101 112 120 124 #> 1_8  42 50 61 71  84  93 110 116 126 134 125  NA #> 1_17 42 51 61 72  83  89  98 103 113 123 133 142 #> 1_19 43 48 55 62  65  71  82  88 106 120 144 157 #> 1_4  42 49 56 67  74  87 102 108 136 154 160 157 #> 1_6  41 49 59 74  97 124 141 148 155 160 160 157 #> 1_11 43 51 63 84 112 139 168 177 182 184 181 175 #> 1_3  43 39 55 67  84  99 115 138 163 187 198 202 #> 1_1  42 51 59 64  76  93 106 125 149 171 199 205 #> 1_12 41 49 56 62  72  88 119 135 162 185 195 205 #> 1_2  40 49 58 72  84 103 122 138 162 187 209 215 #> 1_5  41 42 48 60  79 106 141 164 197 199 220 223 #> 1_14 41 49 62 79 101 128 164 192 227 248 259 266 #> 1_7  41 49 57 71  89 112 146 174 218 250 288 305 #> 2_24 42 52 58 74  66  68  70  71  72  72  76  74 #> 2_30 42 48 59 72  85  98 115 122 143 151 157 150 #> 2_22 41 55 64 77  90  95 108 111 131 148 164 167 #> 2_23 43 52 61 73  90 103 127 135 145 163 170 175 #> 2_27 39 46 58 73  87 100 115 123 144 163 185 192 #> 2_28 39 46 58 73  92 114 145 156 184 207 212 233 #> 2_26 42 48 57 74  93 114 136 147 169 205 236 251 #> 2_25 40 49 62 78 102 124 146 164 197 231 259 265 #> 2_29 39 48 59 74  87 106 134 150 187 230 279 309 #> 2_21 40 50 62 86 125 163 217 240 275 307 318 331 #> 3_33 39 50 63 77  96 111 137 144 151 146 156 147 #> 3_37 41 48 56 68  80  83 103 112 135 157 169 178 #> 3_36 39 48 61 76  98 116 145 166 198 227 225 220 #> 3_31 42 53 62 73  85 102 123 138 170 204 235 256 #> 3_39 42 50 61 78  89 109 130 146 170 214 250 272 #> 3_38 41 49 61 74  98 109 128 154 192 232 280 290 #> 3_32 41 49 65 82 107 129 159 179 221 263 291 305 #> 3_40 41 55 66 79 101 120 154 182 215 262 295 321 #> 3_34 41 49 63 85 107 134 164 186 235 294 327 341 #> 3_35 41 53 64 87 123 158 201 238 287 332 361 373 #> 4_44 42 51 65 86 103 118 127 138 145 146  NA  NA #> 4_45 41 50 61 78  98 117 135 141 147 174 197 196 #> 4_43 42 55 69 96 131 157 184 188 197 198 199 200 #> 4_41 42 51 66 85 103 124 155 153 175 184 199 204 #> 4_47 41 53 66 79 100 123 148 157 168 185 210 205 #> 4_49 40 53 64 85 108 128 152 166 184 203 233 237 #> 4_46 40 52 62 82 101 120 144 156 173 210 231 238 #> 4_50 41 54 67 84 105 122 155 175 205 234 264 264 #> 4_42 42 49 63 84 103 126 160 174 204 234 269 281 #> 4_48 39 50 62 80 104 125 154 170 222 261 303 322 acast(chick_m, chick ~ time ~ diet) #> , , 1 #>  #>     0  2  4  6   8  10  12  14  16  18  20  21 #> 18 39 35 NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 16 41 45 49 51  57  51  54  NA  NA  NA  NA  NA #> 15 41 49 56 64  68  68  67  68  NA  NA  NA  NA #> 13 41 48 53 60  65  67  71  70  71  81  91  96 #> 9  42 51 59 68  85  96  90  92  93 100 100  98 #> 20 41 47 54 58  65  73  77  89  98 107 115 117 #> 10 41 44 52 63  74  81  89  96 101 112 120 124 #> 8  42 50 61 71  84  93 110 116 126 134 125  NA #> 17 42 51 61 72  83  89  98 103 113 123 133 142 #> 19 43 48 55 62  65  71  82  88 106 120 144 157 #> 4  42 49 56 67  74  87 102 108 136 154 160 157 #> 6  41 49 59 74  97 124 141 148 155 160 160 157 #> 11 43 51 63 84 112 139 168 177 182 184 181 175 #> 3  43 39 55 67  84  99 115 138 163 187 198 202 #> 1  42 51 59 64  76  93 106 125 149 171 199 205 #> 12 41 49 56 62  72  88 119 135 162 185 195 205 #> 2  40 49 58 72  84 103 122 138 162 187 209 215 #> 5  41 42 48 60  79 106 141 164 197 199 220 223 #> 14 41 49 62 79 101 128 164 192 227 248 259 266 #> 7  41 49 57 71  89 112 146 174 218 250 288 305 #> 24 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 30 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 22 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 23 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 27 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 28 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 26 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 25 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 29 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 21 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 33 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 37 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 36 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 31 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 39 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 38 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 32 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 40 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 34 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 35 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 44 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 45 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 43 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 41 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 47 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 49 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 46 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 50 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 42 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 48 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #>  #> , , 2 #>  #>     0  2  4  6   8  10  12  14  16  18  20  21 #> 18 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 16 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 15 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 13 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 9  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 20 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 10 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 8  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 17 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 19 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 4  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 6  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 11 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 3  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 1  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 12 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 2  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 5  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 14 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 7  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 24 42 52 58 74  66  68  70  71  72  72  76  74 #> 30 42 48 59 72  85  98 115 122 143 151 157 150 #> 22 41 55 64 77  90  95 108 111 131 148 164 167 #> 23 43 52 61 73  90 103 127 135 145 163 170 175 #> 27 39 46 58 73  87 100 115 123 144 163 185 192 #> 28 39 46 58 73  92 114 145 156 184 207 212 233 #> 26 42 48 57 74  93 114 136 147 169 205 236 251 #> 25 40 49 62 78 102 124 146 164 197 231 259 265 #> 29 39 48 59 74  87 106 134 150 187 230 279 309 #> 21 40 50 62 86 125 163 217 240 275 307 318 331 #> 33 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 37 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 36 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 31 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 39 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 38 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 32 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 40 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 34 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 35 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 44 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 45 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 43 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 41 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 47 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 49 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 46 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 50 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 42 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 48 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #>  #> , , 3 #>  #>     0  2  4  6   8  10  12  14  16  18  20  21 #> 18 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 16 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 15 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 13 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 9  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 20 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 10 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 8  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 17 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 19 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 4  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 6  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 11 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 3  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 1  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 12 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 2  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 5  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 14 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 7  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 24 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 30 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 22 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 23 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 27 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 28 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 26 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 25 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 29 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 21 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 33 39 50 63 77  96 111 137 144 151 146 156 147 #> 37 41 48 56 68  80  83 103 112 135 157 169 178 #> 36 39 48 61 76  98 116 145 166 198 227 225 220 #> 31 42 53 62 73  85 102 123 138 170 204 235 256 #> 39 42 50 61 78  89 109 130 146 170 214 250 272 #> 38 41 49 61 74  98 109 128 154 192 232 280 290 #> 32 41 49 65 82 107 129 159 179 221 263 291 305 #> 40 41 55 66 79 101 120 154 182 215 262 295 321 #> 34 41 49 63 85 107 134 164 186 235 294 327 341 #> 35 41 53 64 87 123 158 201 238 287 332 361 373 #> 44 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 45 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 43 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 41 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 47 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 49 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 46 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 50 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 42 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 48 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #>  #> , , 4 #>  #>     0  2  4  6   8  10  12  14  16  18  20  21 #> 18 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 16 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 15 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 13 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 9  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 20 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 10 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 8  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 17 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 19 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 4  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 6  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 11 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 3  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 1  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 12 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 2  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 5  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 14 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 7  NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 24 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 30 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 22 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 23 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 27 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 28 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 26 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 25 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 29 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 21 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 33 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 37 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 36 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 31 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 39 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 38 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 32 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 40 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 34 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 35 NA NA NA NA  NA  NA  NA  NA  NA  NA  NA  NA #> 44 42 51 65 86 103 118 127 138 145 146  NA  NA #> 45 41 50 61 78  98 117 135 141 147 174 197 196 #> 43 42 55 69 96 131 157 184 188 197 198 199 200 #> 41 42 51 66 85 103 124 155 153 175 184 199 204 #> 47 41 53 66 79 100 123 148 157 168 185 210 205 #> 49 40 53 64 85 108 128 152 166 184 203 233 237 #> 46 40 52 62 82 101 120 144 156 173 210 231 238 #> 50 41 54 67 84 105 122 155 175 205 234 264 264 #> 42 42 49 63 84 103 126 160 174 204 234 269 281 #> 48 39 50 62 80 104 125 154 170 222 261 303 322 #>  acast(chick_m, diet + chick ~ time, length, margins=\"diet\") #>              0  2  4  6  8 10 12 14 16 18 20 21 #> 1_18         1  1  0  0  0  0  0  0  0  0  0  0 #> 1_16         1  1  1  1  1  1  1  0  0  0  0  0 #> 1_15         1  1  1  1  1  1  1  1  0  0  0  0 #> 1_13         1  1  1  1  1  1  1  1  1  1  1  1 #> 1_9          1  1  1  1  1  1  1  1  1  1  1  1 #> 1_20         1  1  1  1  1  1  1  1  1  1  1  1 #> 1_10         1  1  1  1  1  1  1  1  1  1  1  1 #> 1_8          1  1  1  1  1  1  1  1  1  1  1  0 #> 1_17         1  1  1  1  1  1  1  1  1  1  1  1 #> 1_19         1  1  1  1  1  1  1  1  1  1  1  1 #> 1_4          1  1  1  1  1  1  1  1  1  1  1  1 #> 1_6          1  1  1  1  1  1  1  1  1  1  1  1 #> 1_11         1  1  1  1  1  1  1  1  1  1  1  1 #> 1_3          1  1  1  1  1  1  1  1  1  1  1  1 #> 1_1          1  1  1  1  1  1  1  1  1  1  1  1 #> 1_12         1  1  1  1  1  1  1  1  1  1  1  1 #> 1_2          1  1  1  1  1  1  1  1  1  1  1  1 #> 1_5          1  1  1  1  1  1  1  1  1  1  1  1 #> 1_14         1  1  1  1  1  1  1  1  1  1  1  1 #> 1_7          1  1  1  1  1  1  1  1  1  1  1  1 #> 2_24         1  1  1  1  1  1  1  1  1  1  1  1 #> 2_30         1  1  1  1  1  1  1  1  1  1  1  1 #> 2_22         1  1  1  1  1  1  1  1  1  1  1  1 #> 2_23         1  1  1  1  1  1  1  1  1  1  1  1 #> 2_27         1  1  1  1  1  1  1  1  1  1  1  1 #> 2_28         1  1  1  1  1  1  1  1  1  1  1  1 #> 2_26         1  1  1  1  1  1  1  1  1  1  1  1 #> 2_25         1  1  1  1  1  1  1  1  1  1  1  1 #> 2_29         1  1  1  1  1  1  1  1  1  1  1  1 #> 2_21         1  1  1  1  1  1  1  1  1  1  1  1 #> 3_33         1  1  1  1  1  1  1  1  1  1  1  1 #> 3_37         1  1  1  1  1  1  1  1  1  1  1  1 #> 3_36         1  1  1  1  1  1  1  1  1  1  1  1 #> 3_31         1  1  1  1  1  1  1  1  1  1  1  1 #> 3_39         1  1  1  1  1  1  1  1  1  1  1  1 #> 3_38         1  1  1  1  1  1  1  1  1  1  1  1 #> 3_32         1  1  1  1  1  1  1  1  1  1  1  1 #> 3_40         1  1  1  1  1  1  1  1  1  1  1  1 #> 3_34         1  1  1  1  1  1  1  1  1  1  1  1 #> 3_35         1  1  1  1  1  1  1  1  1  1  1  1 #> 4_44         1  1  1  1  1  1  1  1  1  1  0  0 #> 4_45         1  1  1  1  1  1  1  1  1  1  1  1 #> 4_43         1  1  1  1  1  1  1  1  1  1  1  1 #> 4_41         1  1  1  1  1  1  1  1  1  1  1  1 #> 4_47         1  1  1  1  1  1  1  1  1  1  1  1 #> 4_49         1  1  1  1  1  1  1  1  1  1  1  1 #> 4_46         1  1  1  1  1  1  1  1  1  1  1  1 #> 4_50         1  1  1  1  1  1  1  1  1  1  1  1 #> 4_42         1  1  1  1  1  1  1  1  1  1  1  1 #> 4_48         1  1  1  1  1  1  1  1  1  1  1  1 #> (all)_(all) 50 50 49 49 49 49 49 48 47 47 46 45 acast(chick_m, diet + chick ~ time, length, drop = FALSE) #>      0 2 4 6 8 10 12 14 16 18 20 21 #> 1_18 1 1 0 0 0  0  0  0  0  0  0  0 #> 1_16 1 1 1 1 1  1  1  0  0  0  0  0 #> 1_15 1 1 1 1 1  1  1  1  0  0  0  0 #> 1_13 1 1 1 1 1  1  1  1  1  1  1  1 #> 1_9  1 1 1 1 1  1  1  1  1  1  1  1 #> 1_20 1 1 1 1 1  1  1  1  1  1  1  1 #> 1_10 1 1 1 1 1  1  1  1  1  1  1  1 #> 1_8  1 1 1 1 1  1  1  1  1  1  1  0 #> 1_17 1 1 1 1 1  1  1  1  1  1  1  1 #> 1_19 1 1 1 1 1  1  1  1  1  1  1  1 #> 1_4  1 1 1 1 1  1  1  1  1  1  1  1 #> 1_6  1 1 1 1 1  1  1  1  1  1  1  1 #> 1_11 1 1 1 1 1  1  1  1  1  1  1  1 #> 1_3  1 1 1 1 1  1  1  1  1  1  1  1 #> 1_1  1 1 1 1 1  1  1  1  1  1  1  1 #> 1_12 1 1 1 1 1  1  1  1  1  1  1  1 #> 1_2  1 1 1 1 1  1  1  1  1  1  1  1 #> 1_5  1 1 1 1 1  1  1  1  1  1  1  1 #> 1_14 1 1 1 1 1  1  1  1  1  1  1  1 #> 1_7  1 1 1 1 1  1  1  1  1  1  1  1 #> 1_24 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_30 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_22 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_23 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_27 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_28 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_26 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_25 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_29 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_21 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_33 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_37 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_36 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_31 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_39 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_38 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_32 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_40 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_34 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_35 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_44 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_45 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_43 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_41 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_47 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_49 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_46 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_50 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_42 0 0 0 0 0  0  0  0  0  0  0  0 #> 1_48 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_18 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_16 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_15 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_13 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_9  0 0 0 0 0  0  0  0  0  0  0  0 #> 2_20 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_10 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_8  0 0 0 0 0  0  0  0  0  0  0  0 #> 2_17 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_19 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_4  0 0 0 0 0  0  0  0  0  0  0  0 #> 2_6  0 0 0 0 0  0  0  0  0  0  0  0 #> 2_11 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_3  0 0 0 0 0  0  0  0  0  0  0  0 #> 2_1  0 0 0 0 0  0  0  0  0  0  0  0 #> 2_12 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_2  0 0 0 0 0  0  0  0  0  0  0  0 #> 2_5  0 0 0 0 0  0  0  0  0  0  0  0 #> 2_14 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_7  0 0 0 0 0  0  0  0  0  0  0  0 #> 2_24 1 1 1 1 1  1  1  1  1  1  1  1 #> 2_30 1 1 1 1 1  1  1  1  1  1  1  1 #> 2_22 1 1 1 1 1  1  1  1  1  1  1  1 #> 2_23 1 1 1 1 1  1  1  1  1  1  1  1 #> 2_27 1 1 1 1 1  1  1  1  1  1  1  1 #> 2_28 1 1 1 1 1  1  1  1  1  1  1  1 #> 2_26 1 1 1 1 1  1  1  1  1  1  1  1 #> 2_25 1 1 1 1 1  1  1  1  1  1  1  1 #> 2_29 1 1 1 1 1  1  1  1  1  1  1  1 #> 2_21 1 1 1 1 1  1  1  1  1  1  1  1 #> 2_33 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_37 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_36 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_31 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_39 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_38 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_32 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_40 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_34 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_35 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_44 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_45 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_43 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_41 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_47 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_49 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_46 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_50 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_42 0 0 0 0 0  0  0  0  0  0  0  0 #> 2_48 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_18 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_16 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_15 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_13 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_9  0 0 0 0 0  0  0  0  0  0  0  0 #> 3_20 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_10 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_8  0 0 0 0 0  0  0  0  0  0  0  0 #> 3_17 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_19 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_4  0 0 0 0 0  0  0  0  0  0  0  0 #> 3_6  0 0 0 0 0  0  0  0  0  0  0  0 #> 3_11 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_3  0 0 0 0 0  0  0  0  0  0  0  0 #> 3_1  0 0 0 0 0  0  0  0  0  0  0  0 #> 3_12 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_2  0 0 0 0 0  0  0  0  0  0  0  0 #> 3_5  0 0 0 0 0  0  0  0  0  0  0  0 #> 3_14 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_7  0 0 0 0 0  0  0  0  0  0  0  0 #> 3_24 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_30 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_22 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_23 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_27 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_28 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_26 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_25 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_29 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_21 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_33 1 1 1 1 1  1  1  1  1  1  1  1 #> 3_37 1 1 1 1 1  1  1  1  1  1  1  1 #> 3_36 1 1 1 1 1  1  1  1  1  1  1  1 #> 3_31 1 1 1 1 1  1  1  1  1  1  1  1 #> 3_39 1 1 1 1 1  1  1  1  1  1  1  1 #> 3_38 1 1 1 1 1  1  1  1  1  1  1  1 #> 3_32 1 1 1 1 1  1  1  1  1  1  1  1 #> 3_40 1 1 1 1 1  1  1  1  1  1  1  1 #> 3_34 1 1 1 1 1  1  1  1  1  1  1  1 #> 3_35 1 1 1 1 1  1  1  1  1  1  1  1 #> 3_44 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_45 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_43 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_41 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_47 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_49 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_46 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_50 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_42 0 0 0 0 0  0  0  0  0  0  0  0 #> 3_48 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_18 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_16 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_15 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_13 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_9  0 0 0 0 0  0  0  0  0  0  0  0 #> 4_20 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_10 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_8  0 0 0 0 0  0  0  0  0  0  0  0 #> 4_17 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_19 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_4  0 0 0 0 0  0  0  0  0  0  0  0 #> 4_6  0 0 0 0 0  0  0  0  0  0  0  0 #> 4_11 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_3  0 0 0 0 0  0  0  0  0  0  0  0 #> 4_1  0 0 0 0 0  0  0  0  0  0  0  0 #> 4_12 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_2  0 0 0 0 0  0  0  0  0  0  0  0 #> 4_5  0 0 0 0 0  0  0  0  0  0  0  0 #> 4_14 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_7  0 0 0 0 0  0  0  0  0  0  0  0 #> 4_24 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_30 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_22 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_23 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_27 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_28 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_26 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_25 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_29 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_21 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_33 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_37 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_36 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_31 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_39 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_38 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_32 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_40 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_34 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_35 0 0 0 0 0  0  0  0  0  0  0  0 #> 4_44 1 1 1 1 1  1  1  1  1  1  0  0 #> 4_45 1 1 1 1 1  1  1  1  1  1  1  1 #> 4_43 1 1 1 1 1  1  1  1  1  1  1  1 #> 4_41 1 1 1 1 1  1  1  1  1  1  1  1 #> 4_47 1 1 1 1 1  1  1  1  1  1  1  1 #> 4_49 1 1 1 1 1  1  1  1  1  1  1  1 #> 4_46 1 1 1 1 1  1  1  1  1  1  1  1 #> 4_50 1 1 1 1 1  1  1  1  1  1  1  1 #> 4_42 1 1 1 1 1  1  1  1  1  1  1  1 #> 4_48 1 1 1 1 1  1  1  1  1  1  1  1  #Tips example dcast(melt(tips), sex ~ smoker, mean, subset = .(variable == \"total_bill\")) #> Using sex, smoker, day, time as id variables #>      sex       No      Yes #> 1 Female 18.10519 17.97788 #> 2   Male 19.79124 22.28450  ff_d <- melt(french_fries, id=1:4, na.rm=TRUE) acast(ff_d, subject ~ time, length) #>     1  2  3  4  5  6  7  8  9 10 #> 3  30 30 30 30 30 30 30 30 30  0 #> 10 30 30 30 30 30 30 30 30 30 30 #> 15 30 30 30 30 25 30 30 30 30 30 #> 16 30 30 30 30 30 30 30 29 30 30 #> 19 30 30 30 30 30 30 30 30 30 30 #> 31 30 30 30 30 30 30 30 30  0 30 #> 51 30 30 30 30 30 30 30 30 30 30 #> 52 30 30 30 30 30 30 30 30 30 30 #> 63 30 30 30 30 30 30 30 30 30 30 #> 78 30 30 30 30 30 30 30 30 30 30 #> 79 30 30 30 30 30 30 29 28 30  0 #> 86 30 30 30 30 30 30 30 30  0 30 acast(ff_d, subject ~ time, length, fill=0) #>     1  2  3  4  5  6  7  8  9 10 #> 3  30 30 30 30 30 30 30 30 30  0 #> 10 30 30 30 30 30 30 30 30 30 30 #> 15 30 30 30 30 25 30 30 30 30 30 #> 16 30 30 30 30 30 30 30 29 30 30 #> 19 30 30 30 30 30 30 30 30 30 30 #> 31 30 30 30 30 30 30 30 30  0 30 #> 51 30 30 30 30 30 30 30 30 30 30 #> 52 30 30 30 30 30 30 30 30 30 30 #> 63 30 30 30 30 30 30 30 30 30 30 #> 78 30 30 30 30 30 30 30 30 30 30 #> 79 30 30 30 30 30 30 29 28 30  0 #> 86 30 30 30 30 30 30 30 30  0 30 dcast(ff_d, treatment ~ variable, mean, margins = TRUE) #>   treatment   potato  buttery    grassy   rancid   painty    (all) #> 1         1 6.887931 1.780087 0.6491379 4.065517 2.583621 3.194478 #> 2         2 7.001724 1.973913 0.6629310 3.624569 2.455844 3.146413 #> 3         3 6.967965 1.717749 0.6805195 3.866667 2.525541 3.151688 #> 4     (all) 6.952518 1.823699 0.6641727 3.852230 2.521758 3.164218 dcast(ff_d, treatment + subject ~ variable, mean, margins=\"treatment\") #>    treatment subject    potato   buttery     grassy    rancid     painty #> 1          1       3  6.216667 0.3722222 0.18888889 2.1055556 3.11111111 #> 2          1      10  9.955000 6.7500000 0.58500000 4.0200000 1.37500000 #> 3          1      15  3.360000 0.7200000 0.42000000 3.9650000 3.26000000 #> 4          1      16  6.495000 3.2600000 0.75500000 4.1200000 1.23000000 #> 5          1      19  9.385000 3.0550000 2.02000000 5.3600000 2.77500000 #> 6          1      31  8.844444 0.4444444 0.08888889 5.9444444 3.21111111 #> 7          1      51 10.675000 2.6400000 1.05000000 5.1500000 1.95500000 #> 8          1      52  5.060000 0.8050000 0.87500000 4.2850000 2.64500000 #> 9          1      63  6.775000 0.0250000 0.00000000 6.0550000 3.85500000 #> 10         1      78  3.620000 0.7350000 0.54000000 1.5050000 3.49000000 #> 11         1      79  8.061111 0.2823529 0.34444444 0.5666667 0.00000000 #> 12         1      86  4.183333 1.7722222 0.80555556 5.4944444 4.10555556 #> 13         2       3  6.738889 0.5888889 0.10555556 3.1388889 2.47777778 #> 14         2      10  9.995000 6.9800000 0.47500000 2.1500000 0.82000000 #> 15         2      15  4.405000 1.3150000 0.34000000 2.2850000 2.06000000 #> 16         2      16  6.450000 3.3736842 1.05500000 3.4000000 0.45500000 #> 17         2      19  8.640000 2.4500000 1.13500000 5.4050000 4.15500000 #> 18         2      31  8.033333 0.6166667 0.15555556 6.0500000 5.06111111 #> 19         2      51  9.985000 3.7950000 1.57000000 4.6700000 2.25500000 #> 20         2      52  5.515000 1.0250000 1.18000000 4.2250000 2.19500000 #> 21         2      63  8.415000 0.1050000 0.01000000 5.0900000 4.35500000 #> 22         2      78  3.780000 0.2950000 0.75500000 1.5500000 2.72500000 #> 23         2      79  7.938889 0.6941176 0.25555556 1.0333333 0.00000000 #> 24         2      86  3.994444 2.0611111 0.78333333 4.5222222 2.84444444 #> 25         3       3  5.294444 0.7666667 0.09444444 2.8555556 2.86666667 #> 26         3      10 10.030000 6.4500000 0.14500000 3.1100000 0.69000000 #> 27         3      15  3.963158 0.9894737 0.44210526 2.5473684 2.36842105 #> 28         3      16  6.860000 2.7000000 1.12500000 3.2000000 0.55500000 #> 29         3      19  8.740000 1.7250000 2.07000000 7.2400000 3.90500000 #> 30         3      31  9.027778 0.6500000 0.17222222 6.5777778 5.12777778 #> 31         3      51 10.220000 3.1300000 1.35000000 4.9150000 2.54500000 #> 32         3      52  5.475000 0.8650000 0.76500000 3.1600000 2.66000000 #> 33         3      63  8.060000 0.0650000 0.12500000 6.1850000 3.10000000 #> 34         3      78  4.000000 0.7050000 0.66500000 1.1850000 3.52000000 #> 35         3      79  7.733333 0.5722222 0.11666667 1.1777778 0.02777778 #> 36         3      86  3.866667 1.6333333 0.94444444 4.1055556 3.02777778 #> 37     (all)   (all)  6.952518 1.8236994 0.66417266 3.8522302 2.52175793 if (require(\"lattice\")) {  lattice::xyplot(`1` ~ `2` | variable, dcast(ff_d, ... ~ rep), aspect=\"iso\") } #> Loading required package: lattice"},{"path":"/reference/colsplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a vector into multiple columns — colsplit","title":"Split a vector into multiple columns — colsplit","text":"Useful splitting variable names combination multiple variables. Uses type.convert convert column correct type, convert character factor.","code":""},{"path":"/reference/colsplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a vector into multiple columns — colsplit","text":"","code":"colsplit(string, pattern, names)"},{"path":"/reference/colsplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a vector into multiple columns — colsplit","text":"string character vector factor split pattern regular expression split names names output columns","code":""},{"path":"/reference/colsplit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a vector into multiple columns — colsplit","text":"","code":"x <- c(\"a_1\", \"a_2\", \"b_2\", \"c_3\") vars <- colsplit(x, \"_\", c(\"trt\", \"time\")) vars #>   trt time #> 1   a    1 #> 2   a    2 #> 3   b    2 #> 4   c    3 str(vars) #> 'data.frame':\t4 obs. of  2 variables: #>  $ trt : chr  \"a\" \"a\" \"b\" \"c\" #>  $ time: int  1 2 2 3"},{"path":"/reference/french_fries.html","id":null,"dir":"Reference","previous_headings":"","what":"Sensory data from a french fries experiment. — french_fries","title":"Sensory data from a french fries experiment. — french_fries","text":"data collected sensory experiment conducted Iowa State University 2004.  investigators interested effect using three different fryer oils taste fries.","code":""},{"path":"/reference/french_fries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sensory data from a french fries experiment. — french_fries","text":"","code":"french_fries"},{"path":"/reference/french_fries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sensory data from a french fries experiment. — french_fries","text":"data frame 696 rows 9 variables","code":""},{"path":"/reference/french_fries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sensory data from a french fries experiment. — french_fries","text":"Variables: time weeks start study. treatment (type oil), subject, replicate, potato-y flavour, buttery flavour, grassy flavour, rancid flavour, painty flavour","code":""},{"path":"/reference/guess_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess name of value column — guess_value","title":"Guess name of value column — guess_value","text":"Strategy: value () column present? , use Otherwise, guess last column value column","code":""},{"path":"/reference/guess_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess name of value column — guess_value","text":"","code":"guess_value(df)"},{"path":"/reference/guess_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess name of value column — guess_value","text":"df data frame guess value column ","code":""},{"path":"/reference/margins.html","id":null,"dir":"Reference","previous_headings":"","what":"Figure out margining variables. — margins","title":"Figure out margining variables. — margins","text":"Given variables form rows columns, set desired margins, works ones possible. Variables margined dropped silently.","code":""},{"path":"/reference/margins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Figure out margining variables. — margins","text":"","code":"margins(vars, margins = NULL)"},{"path":"/reference/margins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Figure out margining variables. — margins","text":"vars list character vectors giving variables dimension margins character vector variable names compute margins . TRUE compute possible margins.","code":""},{"path":"/reference/margins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Figure out margining variables. — margins","text":"list margining combinations, NULL none.   combinations variables values set  ()","code":""},{"path":"/reference/melt.array.html","id":null,"dir":"Reference","previous_headings":"","what":"Melt an array. — melt.array","title":"Melt an array. — melt.array","text":"code conceptually similar .data.frame.table","code":""},{"path":"/reference/melt.array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Melt an array. — melt.array","text":"","code":"# S3 method for array melt(   data,   varnames = names(dimnames(data)),   ...,   na.rm = FALSE,   as.is = FALSE,   value.name = \"value\" )  # S3 method for table melt(   data,   varnames = names(dimnames(data)),   ...,   na.rm = FALSE,   as.is = FALSE,   value.name = \"value\" )  # S3 method for matrix melt(   data,   varnames = names(dimnames(data)),   ...,   na.rm = FALSE,   as.is = FALSE,   value.name = \"value\" )"},{"path":"/reference/melt.array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Melt an array. — melt.array","text":"data array melt varnames variable names use molten data.frame ... arguments passed methods. na.rm NA values removed data set? convert explicit missings implicit missings. .FALSE, default, dimnames converted using type.convert. TRUE, left strings. value.name name variable used store values","code":""},{"path":[]},{"path":"/reference/melt.array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Melt an array. — melt.array","text":"","code":"a <- array(c(1:23, NA), c(2,3,4)) melt(a) #>    Var1 Var2 Var3 value #> 1     1    1    1     1 #> 2     2    1    1     2 #> 3     1    2    1     3 #> 4     2    2    1     4 #> 5     1    3    1     5 #> 6     2    3    1     6 #> 7     1    1    2     7 #> 8     2    1    2     8 #> 9     1    2    2     9 #> 10    2    2    2    10 #> 11    1    3    2    11 #> 12    2    3    2    12 #> 13    1    1    3    13 #> 14    2    1    3    14 #> 15    1    2    3    15 #> 16    2    2    3    16 #> 17    1    3    3    17 #> 18    2    3    3    18 #> 19    1    1    4    19 #> 20    2    1    4    20 #> 21    1    2    4    21 #> 22    2    2    4    22 #> 23    1    3    4    23 #> 24    2    3    4    NA melt(a, na.rm = TRUE) #>    Var1 Var2 Var3 value #> 1     1    1    1     1 #> 2     2    1    1     2 #> 3     1    2    1     3 #> 4     2    2    1     4 #> 5     1    3    1     5 #> 6     2    3    1     6 #> 7     1    1    2     7 #> 8     2    1    2     8 #> 9     1    2    2     9 #> 10    2    2    2    10 #> 11    1    3    2    11 #> 12    2    3    2    12 #> 13    1    1    3    13 #> 14    2    1    3    14 #> 15    1    2    3    15 #> 16    2    2    3    16 #> 17    1    3    3    17 #> 18    2    3    3    18 #> 19    1    1    4    19 #> 20    2    1    4    20 #> 21    1    2    4    21 #> 22    2    2    4    22 #> 23    1    3    4    23 melt(a, varnames=c(\"X\",\"Y\",\"Z\")) #>    X Y Z value #> 1  1 1 1     1 #> 2  2 1 1     2 #> 3  1 2 1     3 #> 4  2 2 1     4 #> 5  1 3 1     5 #> 6  2 3 1     6 #> 7  1 1 2     7 #> 8  2 1 2     8 #> 9  1 2 2     9 #> 10 2 2 2    10 #> 11 1 3 2    11 #> 12 2 3 2    12 #> 13 1 1 3    13 #> 14 2 1 3    14 #> 15 1 2 3    15 #> 16 2 2 3    16 #> 17 1 3 3    17 #> 18 2 3 3    18 #> 19 1 1 4    19 #> 20 2 1 4    20 #> 21 1 2 4    21 #> 22 2 2 4    22 #> 23 1 3 4    23 #> 24 2 3 4    NA dimnames(a) <- lapply(dim(a), function(x) LETTERS[1:x]) melt(a) #>    Var1 Var2 Var3 value #> 1     A    A    A     1 #> 2     B    A    A     2 #> 3     A    B    A     3 #> 4     B    B    A     4 #> 5     A    C    A     5 #> 6     B    C    A     6 #> 7     A    A    B     7 #> 8     B    A    B     8 #> 9     A    B    B     9 #> 10    B    B    B    10 #> 11    A    C    B    11 #> 12    B    C    B    12 #> 13    A    A    C    13 #> 14    B    A    C    14 #> 15    A    B    C    15 #> 16    B    B    C    16 #> 17    A    C    C    17 #> 18    B    C    C    18 #> 19    A    A    D    19 #> 20    B    A    D    20 #> 21    A    B    D    21 #> 22    B    B    D    22 #> 23    A    C    D    23 #> 24    B    C    D    NA melt(a, varnames=c(\"X\",\"Y\",\"Z\")) #>    X Y Z value #> 1  A A A     1 #> 2  B A A     2 #> 3  A B A     3 #> 4  B B A     4 #> 5  A C A     5 #> 6  B C A     6 #> 7  A A B     7 #> 8  B A B     8 #> 9  A B B     9 #> 10 B B B    10 #> 11 A C B    11 #> 12 B C B    12 #> 13 A A C    13 #> 14 B A C    14 #> 15 A B C    15 #> 16 B B C    16 #> 17 A C C    17 #> 18 B C C    18 #> 19 A A D    19 #> 20 B A D    20 #> 21 A B D    21 #> 22 B B D    22 #> 23 A C D    23 #> 24 B C D    NA dimnames(a)[1] <- list(NULL) melt(a) #>    Var1 Var2 Var3 value #> 1     1    A    A     1 #> 2     2    A    A     2 #> 3     1    B    A     3 #> 4     2    B    A     4 #> 5     1    C    A     5 #> 6     2    C    A     6 #> 7     1    A    B     7 #> 8     2    A    B     8 #> 9     1    B    B     9 #> 10    2    B    B    10 #> 11    1    C    B    11 #> 12    2    C    B    12 #> 13    1    A    C    13 #> 14    2    A    C    14 #> 15    1    B    C    15 #> 16    2    B    C    16 #> 17    1    C    C    17 #> 18    2    C    C    18 #> 19    1    A    D    19 #> 20    2    A    D    20 #> 21    1    B    D    21 #> 22    2    B    D    22 #> 23    1    C    D    23 #> 24    2    C    D    NA"},{"path":"/reference/melt.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Melt a data frame into form suitable for easy casting. — melt.data.frame","title":"Melt a data frame into form suitable for easy casting. — melt.data.frame","text":"need tell melt variables id variables, measured variables. supply one id.vars measure.vars, melt assume remainder variables data set belong . supply neither, melt assume factor character variables id variables, others measured.","code":""},{"path":"/reference/melt.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Melt a data frame into form suitable for easy casting. — melt.data.frame","text":"","code":"# S3 method for data.frame melt(   data,   id.vars,   measure.vars,   variable.name = \"variable\",   ...,   na.rm = FALSE,   value.name = \"value\",   factorsAsStrings = TRUE )"},{"path":"/reference/melt.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Melt a data frame into form suitable for easy casting. — melt.data.frame","text":"data data frame melt id.vars vector id variables. Can integer (variable position) string (variable name). blank, use non-measured variables. measure.vars vector measured variables. Can integer (variable position) string (variable name)blank, use non id.vars variable.name name variable used store measured variable names ... arguments passed methods. na.rm NA values removed data set? convert explicit missings implicit missings. value.name name variable used store values factorsAsStrings Control whether factors converted character melted measure variables. FALSE, coercion forced levels identical across measure.vars.","code":""},{"path":[]},{"path":"/reference/melt.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Melt a data frame into form suitable for easy casting. — melt.data.frame","text":"","code":"names(airquality) <- tolower(names(airquality)) melt(airquality, id=c(\"month\", \"day\")) #>     month day variable value #> 1       5   1    ozone  41.0 #> 2       5   2    ozone  36.0 #> 3       5   3    ozone  12.0 #> 4       5   4    ozone  18.0 #> 5       5   5    ozone    NA #> 6       5   6    ozone  28.0 #> 7       5   7    ozone  23.0 #> 8       5   8    ozone  19.0 #> 9       5   9    ozone   8.0 #> 10      5  10    ozone    NA #> 11      5  11    ozone   7.0 #> 12      5  12    ozone  16.0 #> 13      5  13    ozone  11.0 #> 14      5  14    ozone  14.0 #> 15      5  15    ozone  18.0 #> 16      5  16    ozone  14.0 #> 17      5  17    ozone  34.0 #> 18      5  18    ozone   6.0 #> 19      5  19    ozone  30.0 #> 20      5  20    ozone  11.0 #> 21      5  21    ozone   1.0 #> 22      5  22    ozone  11.0 #> 23      5  23    ozone   4.0 #> 24      5  24    ozone  32.0 #> 25      5  25    ozone    NA #> 26      5  26    ozone    NA #> 27      5  27    ozone    NA #> 28      5  28    ozone  23.0 #> 29      5  29    ozone  45.0 #> 30      5  30    ozone 115.0 #> 31      5  31    ozone  37.0 #> 32      6   1    ozone    NA #> 33      6   2    ozone    NA #> 34      6   3    ozone    NA #> 35      6   4    ozone    NA #> 36      6   5    ozone    NA #> 37      6   6    ozone    NA #> 38      6   7    ozone  29.0 #> 39      6   8    ozone    NA #> 40      6   9    ozone  71.0 #> 41      6  10    ozone  39.0 #> 42      6  11    ozone    NA #> 43      6  12    ozone    NA #> 44      6  13    ozone  23.0 #> 45      6  14    ozone    NA #> 46      6  15    ozone    NA #> 47      6  16    ozone  21.0 #> 48      6  17    ozone  37.0 #> 49      6  18    ozone  20.0 #> 50      6  19    ozone  12.0 #> 51      6  20    ozone  13.0 #> 52      6  21    ozone    NA #> 53      6  22    ozone    NA #> 54      6  23    ozone    NA #> 55      6  24    ozone    NA #> 56      6  25    ozone    NA #> 57      6  26    ozone    NA #> 58      6  27    ozone    NA #> 59      6  28    ozone    NA #> 60      6  29    ozone    NA #> 61      6  30    ozone    NA #> 62      7   1    ozone 135.0 #> 63      7   2    ozone  49.0 #> 64      7   3    ozone  32.0 #> 65      7   4    ozone    NA #> 66      7   5    ozone  64.0 #> 67      7   6    ozone  40.0 #> 68      7   7    ozone  77.0 #> 69      7   8    ozone  97.0 #> 70      7   9    ozone  97.0 #> 71      7  10    ozone  85.0 #> 72      7  11    ozone    NA #> 73      7  12    ozone  10.0 #> 74      7  13    ozone  27.0 #> 75      7  14    ozone    NA #> 76      7  15    ozone   7.0 #> 77      7  16    ozone  48.0 #> 78      7  17    ozone  35.0 #> 79      7  18    ozone  61.0 #> 80      7  19    ozone  79.0 #> 81      7  20    ozone  63.0 #> 82      7  21    ozone  16.0 #> 83      7  22    ozone    NA #> 84      7  23    ozone    NA #> 85      7  24    ozone  80.0 #> 86      7  25    ozone 108.0 #> 87      7  26    ozone  20.0 #> 88      7  27    ozone  52.0 #> 89      7  28    ozone  82.0 #> 90      7  29    ozone  50.0 #> 91      7  30    ozone  64.0 #> 92      7  31    ozone  59.0 #> 93      8   1    ozone  39.0 #> 94      8   2    ozone   9.0 #> 95      8   3    ozone  16.0 #> 96      8   4    ozone  78.0 #> 97      8   5    ozone  35.0 #> 98      8   6    ozone  66.0 #> 99      8   7    ozone 122.0 #> 100     8   8    ozone  89.0 #> 101     8   9    ozone 110.0 #> 102     8  10    ozone    NA #> 103     8  11    ozone    NA #> 104     8  12    ozone  44.0 #> 105     8  13    ozone  28.0 #> 106     8  14    ozone  65.0 #> 107     8  15    ozone    NA #> 108     8  16    ozone  22.0 #> 109     8  17    ozone  59.0 #> 110     8  18    ozone  23.0 #> 111     8  19    ozone  31.0 #> 112     8  20    ozone  44.0 #> 113     8  21    ozone  21.0 #> 114     8  22    ozone   9.0 #> 115     8  23    ozone    NA #> 116     8  24    ozone  45.0 #> 117     8  25    ozone 168.0 #> 118     8  26    ozone  73.0 #> 119     8  27    ozone    NA #> 120     8  28    ozone  76.0 #> 121     8  29    ozone 118.0 #> 122     8  30    ozone  84.0 #> 123     8  31    ozone  85.0 #> 124     9   1    ozone  96.0 #> 125     9   2    ozone  78.0 #> 126     9   3    ozone  73.0 #> 127     9   4    ozone  91.0 #> 128     9   5    ozone  47.0 #> 129     9   6    ozone  32.0 #> 130     9   7    ozone  20.0 #> 131     9   8    ozone  23.0 #> 132     9   9    ozone  21.0 #> 133     9  10    ozone  24.0 #> 134     9  11    ozone  44.0 #> 135     9  12    ozone  21.0 #> 136     9  13    ozone  28.0 #> 137     9  14    ozone   9.0 #> 138     9  15    ozone  13.0 #> 139     9  16    ozone  46.0 #> 140     9  17    ozone  18.0 #> 141     9  18    ozone  13.0 #> 142     9  19    ozone  24.0 #> 143     9  20    ozone  16.0 #> 144     9  21    ozone  13.0 #> 145     9  22    ozone  23.0 #> 146     9  23    ozone  36.0 #> 147     9  24    ozone   7.0 #> 148     9  25    ozone  14.0 #> 149     9  26    ozone  30.0 #> 150     9  27    ozone    NA #> 151     9  28    ozone  14.0 #> 152     9  29    ozone  18.0 #> 153     9  30    ozone  20.0 #> 154     5   1  solar.r 190.0 #> 155     5   2  solar.r 118.0 #> 156     5   3  solar.r 149.0 #> 157     5   4  solar.r 313.0 #> 158     5   5  solar.r    NA #> 159     5   6  solar.r    NA #> 160     5   7  solar.r 299.0 #> 161     5   8  solar.r  99.0 #> 162     5   9  solar.r  19.0 #> 163     5  10  solar.r 194.0 #> 164     5  11  solar.r    NA #> 165     5  12  solar.r 256.0 #> 166     5  13  solar.r 290.0 #> 167     5  14  solar.r 274.0 #> 168     5  15  solar.r  65.0 #> 169     5  16  solar.r 334.0 #> 170     5  17  solar.r 307.0 #> 171     5  18  solar.r  78.0 #> 172     5  19  solar.r 322.0 #> 173     5  20  solar.r  44.0 #> 174     5  21  solar.r   8.0 #> 175     5  22  solar.r 320.0 #> 176     5  23  solar.r  25.0 #> 177     5  24  solar.r  92.0 #> 178     5  25  solar.r  66.0 #> 179     5  26  solar.r 266.0 #> 180     5  27  solar.r    NA #> 181     5  28  solar.r  13.0 #> 182     5  29  solar.r 252.0 #> 183     5  30  solar.r 223.0 #> 184     5  31  solar.r 279.0 #> 185     6   1  solar.r 286.0 #> 186     6   2  solar.r 287.0 #> 187     6   3  solar.r 242.0 #> 188     6   4  solar.r 186.0 #> 189     6   5  solar.r 220.0 #> 190     6   6  solar.r 264.0 #> 191     6   7  solar.r 127.0 #> 192     6   8  solar.r 273.0 #> 193     6   9  solar.r 291.0 #> 194     6  10  solar.r 323.0 #> 195     6  11  solar.r 259.0 #> 196     6  12  solar.r 250.0 #> 197     6  13  solar.r 148.0 #> 198     6  14  solar.r 332.0 #> 199     6  15  solar.r 322.0 #> 200     6  16  solar.r 191.0 #> 201     6  17  solar.r 284.0 #> 202     6  18  solar.r  37.0 #> 203     6  19  solar.r 120.0 #> 204     6  20  solar.r 137.0 #> 205     6  21  solar.r 150.0 #> 206     6  22  solar.r  59.0 #> 207     6  23  solar.r  91.0 #> 208     6  24  solar.r 250.0 #> 209     6  25  solar.r 135.0 #> 210     6  26  solar.r 127.0 #> 211     6  27  solar.r  47.0 #> 212     6  28  solar.r  98.0 #> 213     6  29  solar.r  31.0 #> 214     6  30  solar.r 138.0 #> 215     7   1  solar.r 269.0 #> 216     7   2  solar.r 248.0 #> 217     7   3  solar.r 236.0 #> 218     7   4  solar.r 101.0 #> 219     7   5  solar.r 175.0 #> 220     7   6  solar.r 314.0 #> 221     7   7  solar.r 276.0 #> 222     7   8  solar.r 267.0 #> 223     7   9  solar.r 272.0 #> 224     7  10  solar.r 175.0 #> 225     7  11  solar.r 139.0 #> 226     7  12  solar.r 264.0 #> 227     7  13  solar.r 175.0 #> 228     7  14  solar.r 291.0 #> 229     7  15  solar.r  48.0 #> 230     7  16  solar.r 260.0 #> 231     7  17  solar.r 274.0 #> 232     7  18  solar.r 285.0 #> 233     7  19  solar.r 187.0 #> 234     7  20  solar.r 220.0 #> 235     7  21  solar.r   7.0 #> 236     7  22  solar.r 258.0 #> 237     7  23  solar.r 295.0 #> 238     7  24  solar.r 294.0 #> 239     7  25  solar.r 223.0 #> 240     7  26  solar.r  81.0 #> 241     7  27  solar.r  82.0 #> 242     7  28  solar.r 213.0 #> 243     7  29  solar.r 275.0 #> 244     7  30  solar.r 253.0 #> 245     7  31  solar.r 254.0 #> 246     8   1  solar.r  83.0 #> 247     8   2  solar.r  24.0 #> 248     8   3  solar.r  77.0 #> 249     8   4  solar.r    NA #> 250     8   5  solar.r    NA #> 251     8   6  solar.r    NA #> 252     8   7  solar.r 255.0 #> 253     8   8  solar.r 229.0 #> 254     8   9  solar.r 207.0 #> 255     8  10  solar.r 222.0 #> 256     8  11  solar.r 137.0 #> 257     8  12  solar.r 192.0 #> 258     8  13  solar.r 273.0 #> 259     8  14  solar.r 157.0 #> 260     8  15  solar.r  64.0 #> 261     8  16  solar.r  71.0 #> 262     8  17  solar.r  51.0 #> 263     8  18  solar.r 115.0 #> 264     8  19  solar.r 244.0 #> 265     8  20  solar.r 190.0 #> 266     8  21  solar.r 259.0 #> 267     8  22  solar.r  36.0 #> 268     8  23  solar.r 255.0 #> 269     8  24  solar.r 212.0 #> 270     8  25  solar.r 238.0 #> 271     8  26  solar.r 215.0 #> 272     8  27  solar.r 153.0 #> 273     8  28  solar.r 203.0 #> 274     8  29  solar.r 225.0 #> 275     8  30  solar.r 237.0 #> 276     8  31  solar.r 188.0 #> 277     9   1  solar.r 167.0 #> 278     9   2  solar.r 197.0 #> 279     9   3  solar.r 183.0 #> 280     9   4  solar.r 189.0 #> 281     9   5  solar.r  95.0 #> 282     9   6  solar.r  92.0 #> 283     9   7  solar.r 252.0 #> 284     9   8  solar.r 220.0 #> 285     9   9  solar.r 230.0 #> 286     9  10  solar.r 259.0 #> 287     9  11  solar.r 236.0 #> 288     9  12  solar.r 259.0 #> 289     9  13  solar.r 238.0 #> 290     9  14  solar.r  24.0 #> 291     9  15  solar.r 112.0 #> 292     9  16  solar.r 237.0 #> 293     9  17  solar.r 224.0 #> 294     9  18  solar.r  27.0 #> 295     9  19  solar.r 238.0 #> 296     9  20  solar.r 201.0 #> 297     9  21  solar.r 238.0 #> 298     9  22  solar.r  14.0 #> 299     9  23  solar.r 139.0 #> 300     9  24  solar.r  49.0 #> 301     9  25  solar.r  20.0 #> 302     9  26  solar.r 193.0 #> 303     9  27  solar.r 145.0 #> 304     9  28  solar.r 191.0 #> 305     9  29  solar.r 131.0 #> 306     9  30  solar.r 223.0 #> 307     5   1     wind   7.4 #> 308     5   2     wind   8.0 #> 309     5   3     wind  12.6 #> 310     5   4     wind  11.5 #> 311     5   5     wind  14.3 #> 312     5   6     wind  14.9 #> 313     5   7     wind   8.6 #> 314     5   8     wind  13.8 #> 315     5   9     wind  20.1 #> 316     5  10     wind   8.6 #> 317     5  11     wind   6.9 #> 318     5  12     wind   9.7 #> 319     5  13     wind   9.2 #> 320     5  14     wind  10.9 #> 321     5  15     wind  13.2 #> 322     5  16     wind  11.5 #> 323     5  17     wind  12.0 #> 324     5  18     wind  18.4 #> 325     5  19     wind  11.5 #> 326     5  20     wind   9.7 #> 327     5  21     wind   9.7 #> 328     5  22     wind  16.6 #> 329     5  23     wind   9.7 #> 330     5  24     wind  12.0 #> 331     5  25     wind  16.6 #> 332     5  26     wind  14.9 #> 333     5  27     wind   8.0 #> 334     5  28     wind  12.0 #> 335     5  29     wind  14.9 #> 336     5  30     wind   5.7 #> 337     5  31     wind   7.4 #> 338     6   1     wind   8.6 #> 339     6   2     wind   9.7 #> 340     6   3     wind  16.1 #> 341     6   4     wind   9.2 #> 342     6   5     wind   8.6 #> 343     6   6     wind  14.3 #> 344     6   7     wind   9.7 #> 345     6   8     wind   6.9 #> 346     6   9     wind  13.8 #> 347     6  10     wind  11.5 #> 348     6  11     wind  10.9 #> 349     6  12     wind   9.2 #> 350     6  13     wind   8.0 #> 351     6  14     wind  13.8 #> 352     6  15     wind  11.5 #> 353     6  16     wind  14.9 #> 354     6  17     wind  20.7 #> 355     6  18     wind   9.2 #> 356     6  19     wind  11.5 #> 357     6  20     wind  10.3 #> 358     6  21     wind   6.3 #> 359     6  22     wind   1.7 #> 360     6  23     wind   4.6 #> 361     6  24     wind   6.3 #> 362     6  25     wind   8.0 #> 363     6  26     wind   8.0 #> 364     6  27     wind  10.3 #> 365     6  28     wind  11.5 #> 366     6  29     wind  14.9 #> 367     6  30     wind   8.0 #> 368     7   1     wind   4.1 #> 369     7   2     wind   9.2 #> 370     7   3     wind   9.2 #> 371     7   4     wind  10.9 #> 372     7   5     wind   4.6 #> 373     7   6     wind  10.9 #> 374     7   7     wind   5.1 #> 375     7   8     wind   6.3 #> 376     7   9     wind   5.7 #> 377     7  10     wind   7.4 #> 378     7  11     wind   8.6 #> 379     7  12     wind  14.3 #> 380     7  13     wind  14.9 #> 381     7  14     wind  14.9 #> 382     7  15     wind  14.3 #> 383     7  16     wind   6.9 #> 384     7  17     wind  10.3 #> 385     7  18     wind   6.3 #> 386     7  19     wind   5.1 #> 387     7  20     wind  11.5 #> 388     7  21     wind   6.9 #> 389     7  22     wind   9.7 #> 390     7  23     wind  11.5 #> 391     7  24     wind   8.6 #> 392     7  25     wind   8.0 #> 393     7  26     wind   8.6 #> 394     7  27     wind  12.0 #> 395     7  28     wind   7.4 #> 396     7  29     wind   7.4 #> 397     7  30     wind   7.4 #> 398     7  31     wind   9.2 #> 399     8   1     wind   6.9 #> 400     8   2     wind  13.8 #> 401     8   3     wind   7.4 #> 402     8   4     wind   6.9 #> 403     8   5     wind   7.4 #> 404     8   6     wind   4.6 #> 405     8   7     wind   4.0 #> 406     8   8     wind  10.3 #> 407     8   9     wind   8.0 #> 408     8  10     wind   8.6 #> 409     8  11     wind  11.5 #> 410     8  12     wind  11.5 #> 411     8  13     wind  11.5 #> 412     8  14     wind   9.7 #> 413     8  15     wind  11.5 #> 414     8  16     wind  10.3 #> 415     8  17     wind   6.3 #> 416     8  18     wind   7.4 #> 417     8  19     wind  10.9 #> 418     8  20     wind  10.3 #> 419     8  21     wind  15.5 #> 420     8  22     wind  14.3 #> 421     8  23     wind  12.6 #> 422     8  24     wind   9.7 #> 423     8  25     wind   3.4 #> 424     8  26     wind   8.0 #> 425     8  27     wind   5.7 #> 426     8  28     wind   9.7 #> 427     8  29     wind   2.3 #> 428     8  30     wind   6.3 #> 429     8  31     wind   6.3 #> 430     9   1     wind   6.9 #> 431     9   2     wind   5.1 #> 432     9   3     wind   2.8 #> 433     9   4     wind   4.6 #> 434     9   5     wind   7.4 #> 435     9   6     wind  15.5 #> 436     9   7     wind  10.9 #> 437     9   8     wind  10.3 #> 438     9   9     wind  10.9 #> 439     9  10     wind   9.7 #> 440     9  11     wind  14.9 #> 441     9  12     wind  15.5 #> 442     9  13     wind   6.3 #> 443     9  14     wind  10.9 #> 444     9  15     wind  11.5 #> 445     9  16     wind   6.9 #> 446     9  17     wind  13.8 #> 447     9  18     wind  10.3 #> 448     9  19     wind  10.3 #> 449     9  20     wind   8.0 #> 450     9  21     wind  12.6 #> 451     9  22     wind   9.2 #> 452     9  23     wind  10.3 #> 453     9  24     wind  10.3 #> 454     9  25     wind  16.6 #> 455     9  26     wind   6.9 #> 456     9  27     wind  13.2 #> 457     9  28     wind  14.3 #> 458     9  29     wind   8.0 #> 459     9  30     wind  11.5 #> 460     5   1     temp  67.0 #> 461     5   2     temp  72.0 #> 462     5   3     temp  74.0 #> 463     5   4     temp  62.0 #> 464     5   5     temp  56.0 #> 465     5   6     temp  66.0 #> 466     5   7     temp  65.0 #> 467     5   8     temp  59.0 #> 468     5   9     temp  61.0 #> 469     5  10     temp  69.0 #> 470     5  11     temp  74.0 #> 471     5  12     temp  69.0 #> 472     5  13     temp  66.0 #> 473     5  14     temp  68.0 #> 474     5  15     temp  58.0 #> 475     5  16     temp  64.0 #> 476     5  17     temp  66.0 #> 477     5  18     temp  57.0 #> 478     5  19     temp  68.0 #> 479     5  20     temp  62.0 #> 480     5  21     temp  59.0 #> 481     5  22     temp  73.0 #> 482     5  23     temp  61.0 #> 483     5  24     temp  61.0 #> 484     5  25     temp  57.0 #> 485     5  26     temp  58.0 #> 486     5  27     temp  57.0 #> 487     5  28     temp  67.0 #> 488     5  29     temp  81.0 #> 489     5  30     temp  79.0 #> 490     5  31     temp  76.0 #> 491     6   1     temp  78.0 #> 492     6   2     temp  74.0 #> 493     6   3     temp  67.0 #> 494     6   4     temp  84.0 #> 495     6   5     temp  85.0 #> 496     6   6     temp  79.0 #> 497     6   7     temp  82.0 #> 498     6   8     temp  87.0 #> 499     6   9     temp  90.0 #> 500     6  10     temp  87.0 #> 501     6  11     temp  93.0 #> 502     6  12     temp  92.0 #> 503     6  13     temp  82.0 #> 504     6  14     temp  80.0 #> 505     6  15     temp  79.0 #> 506     6  16     temp  77.0 #> 507     6  17     temp  72.0 #> 508     6  18     temp  65.0 #> 509     6  19     temp  73.0 #> 510     6  20     temp  76.0 #> 511     6  21     temp  77.0 #> 512     6  22     temp  76.0 #> 513     6  23     temp  76.0 #> 514     6  24     temp  76.0 #> 515     6  25     temp  75.0 #> 516     6  26     temp  78.0 #> 517     6  27     temp  73.0 #> 518     6  28     temp  80.0 #> 519     6  29     temp  77.0 #> 520     6  30     temp  83.0 #> 521     7   1     temp  84.0 #> 522     7   2     temp  85.0 #> 523     7   3     temp  81.0 #> 524     7   4     temp  84.0 #> 525     7   5     temp  83.0 #> 526     7   6     temp  83.0 #> 527     7   7     temp  88.0 #> 528     7   8     temp  92.0 #> 529     7   9     temp  92.0 #> 530     7  10     temp  89.0 #> 531     7  11     temp  82.0 #> 532     7  12     temp  73.0 #> 533     7  13     temp  81.0 #> 534     7  14     temp  91.0 #> 535     7  15     temp  80.0 #> 536     7  16     temp  81.0 #> 537     7  17     temp  82.0 #> 538     7  18     temp  84.0 #> 539     7  19     temp  87.0 #> 540     7  20     temp  85.0 #> 541     7  21     temp  74.0 #> 542     7  22     temp  81.0 #> 543     7  23     temp  82.0 #> 544     7  24     temp  86.0 #> 545     7  25     temp  85.0 #> 546     7  26     temp  82.0 #> 547     7  27     temp  86.0 #> 548     7  28     temp  88.0 #> 549     7  29     temp  86.0 #> 550     7  30     temp  83.0 #> 551     7  31     temp  81.0 #> 552     8   1     temp  81.0 #> 553     8   2     temp  81.0 #> 554     8   3     temp  82.0 #> 555     8   4     temp  86.0 #> 556     8   5     temp  85.0 #> 557     8   6     temp  87.0 #> 558     8   7     temp  89.0 #> 559     8   8     temp  90.0 #> 560     8   9     temp  90.0 #> 561     8  10     temp  92.0 #> 562     8  11     temp  86.0 #> 563     8  12     temp  86.0 #> 564     8  13     temp  82.0 #> 565     8  14     temp  80.0 #> 566     8  15     temp  79.0 #> 567     8  16     temp  77.0 #> 568     8  17     temp  79.0 #> 569     8  18     temp  76.0 #> 570     8  19     temp  78.0 #> 571     8  20     temp  78.0 #> 572     8  21     temp  77.0 #> 573     8  22     temp  72.0 #> 574     8  23     temp  75.0 #> 575     8  24     temp  79.0 #> 576     8  25     temp  81.0 #> 577     8  26     temp  86.0 #> 578     8  27     temp  88.0 #> 579     8  28     temp  97.0 #> 580     8  29     temp  94.0 #> 581     8  30     temp  96.0 #> 582     8  31     temp  94.0 #> 583     9   1     temp  91.0 #> 584     9   2     temp  92.0 #> 585     9   3     temp  93.0 #> 586     9   4     temp  93.0 #> 587     9   5     temp  87.0 #> 588     9   6     temp  84.0 #> 589     9   7     temp  80.0 #> 590     9   8     temp  78.0 #> 591     9   9     temp  75.0 #> 592     9  10     temp  73.0 #> 593     9  11     temp  81.0 #> 594     9  12     temp  76.0 #> 595     9  13     temp  77.0 #> 596     9  14     temp  71.0 #> 597     9  15     temp  71.0 #> 598     9  16     temp  78.0 #> 599     9  17     temp  67.0 #> 600     9  18     temp  76.0 #> 601     9  19     temp  68.0 #> 602     9  20     temp  82.0 #> 603     9  21     temp  64.0 #> 604     9  22     temp  71.0 #> 605     9  23     temp  81.0 #> 606     9  24     temp  69.0 #> 607     9  25     temp  63.0 #> 608     9  26     temp  70.0 #> 609     9  27     temp  77.0 #> 610     9  28     temp  75.0 #> 611     9  29     temp  76.0 #> 612     9  30     temp  68.0 names(ChickWeight) <- tolower(names(ChickWeight)) melt(ChickWeight, id=2:4) #>     time chick diet variable value #> 1      0     1    1   weight    42 #> 2      2     1    1   weight    51 #> 3      4     1    1   weight    59 #> 4      6     1    1   weight    64 #> 5      8     1    1   weight    76 #> 6     10     1    1   weight    93 #> 7     12     1    1   weight   106 #> 8     14     1    1   weight   125 #> 9     16     1    1   weight   149 #> 10    18     1    1   weight   171 #> 11    20     1    1   weight   199 #> 12    21     1    1   weight   205 #> 13     0     2    1   weight    40 #> 14     2     2    1   weight    49 #> 15     4     2    1   weight    58 #> 16     6     2    1   weight    72 #> 17     8     2    1   weight    84 #> 18    10     2    1   weight   103 #> 19    12     2    1   weight   122 #> 20    14     2    1   weight   138 #> 21    16     2    1   weight   162 #> 22    18     2    1   weight   187 #> 23    20     2    1   weight   209 #> 24    21     2    1   weight   215 #> 25     0     3    1   weight    43 #> 26     2     3    1   weight    39 #> 27     4     3    1   weight    55 #> 28     6     3    1   weight    67 #> 29     8     3    1   weight    84 #> 30    10     3    1   weight    99 #> 31    12     3    1   weight   115 #> 32    14     3    1   weight   138 #> 33    16     3    1   weight   163 #> 34    18     3    1   weight   187 #> 35    20     3    1   weight   198 #> 36    21     3    1   weight   202 #> 37     0     4    1   weight    42 #> 38     2     4    1   weight    49 #> 39     4     4    1   weight    56 #> 40     6     4    1   weight    67 #> 41     8     4    1   weight    74 #> 42    10     4    1   weight    87 #> 43    12     4    1   weight   102 #> 44    14     4    1   weight   108 #> 45    16     4    1   weight   136 #> 46    18     4    1   weight   154 #> 47    20     4    1   weight   160 #> 48    21     4    1   weight   157 #> 49     0     5    1   weight    41 #> 50     2     5    1   weight    42 #> 51     4     5    1   weight    48 #> 52     6     5    1   weight    60 #> 53     8     5    1   weight    79 #> 54    10     5    1   weight   106 #> 55    12     5    1   weight   141 #> 56    14     5    1   weight   164 #> 57    16     5    1   weight   197 #> 58    18     5    1   weight   199 #> 59    20     5    1   weight   220 #> 60    21     5    1   weight   223 #> 61     0     6    1   weight    41 #> 62     2     6    1   weight    49 #> 63     4     6    1   weight    59 #> 64     6     6    1   weight    74 #> 65     8     6    1   weight    97 #> 66    10     6    1   weight   124 #> 67    12     6    1   weight   141 #> 68    14     6    1   weight   148 #> 69    16     6    1   weight   155 #> 70    18     6    1   weight   160 #> 71    20     6    1   weight   160 #> 72    21     6    1   weight   157 #> 73     0     7    1   weight    41 #> 74     2     7    1   weight    49 #> 75     4     7    1   weight    57 #> 76     6     7    1   weight    71 #> 77     8     7    1   weight    89 #> 78    10     7    1   weight   112 #> 79    12     7    1   weight   146 #> 80    14     7    1   weight   174 #> 81    16     7    1   weight   218 #> 82    18     7    1   weight   250 #> 83    20     7    1   weight   288 #> 84    21     7    1   weight   305 #> 85     0     8    1   weight    42 #> 86     2     8    1   weight    50 #> 87     4     8    1   weight    61 #> 88     6     8    1   weight    71 #> 89     8     8    1   weight    84 #> 90    10     8    1   weight    93 #> 91    12     8    1   weight   110 #> 92    14     8    1   weight   116 #> 93    16     8    1   weight   126 #> 94    18     8    1   weight   134 #> 95    20     8    1   weight   125 #> 96     0     9    1   weight    42 #> 97     2     9    1   weight    51 #> 98     4     9    1   weight    59 #> 99     6     9    1   weight    68 #> 100    8     9    1   weight    85 #> 101   10     9    1   weight    96 #> 102   12     9    1   weight    90 #> 103   14     9    1   weight    92 #> 104   16     9    1   weight    93 #> 105   18     9    1   weight   100 #> 106   20     9    1   weight   100 #> 107   21     9    1   weight    98 #> 108    0    10    1   weight    41 #> 109    2    10    1   weight    44 #> 110    4    10    1   weight    52 #> 111    6    10    1   weight    63 #> 112    8    10    1   weight    74 #> 113   10    10    1   weight    81 #> 114   12    10    1   weight    89 #> 115   14    10    1   weight    96 #> 116   16    10    1   weight   101 #> 117   18    10    1   weight   112 #> 118   20    10    1   weight   120 #> 119   21    10    1   weight   124 #> 120    0    11    1   weight    43 #> 121    2    11    1   weight    51 #> 122    4    11    1   weight    63 #> 123    6    11    1   weight    84 #> 124    8    11    1   weight   112 #> 125   10    11    1   weight   139 #> 126   12    11    1   weight   168 #> 127   14    11    1   weight   177 #> 128   16    11    1   weight   182 #> 129   18    11    1   weight   184 #> 130   20    11    1   weight   181 #> 131   21    11    1   weight   175 #> 132    0    12    1   weight    41 #> 133    2    12    1   weight    49 #> 134    4    12    1   weight    56 #> 135    6    12    1   weight    62 #> 136    8    12    1   weight    72 #> 137   10    12    1   weight    88 #> 138   12    12    1   weight   119 #> 139   14    12    1   weight   135 #> 140   16    12    1   weight   162 #> 141   18    12    1   weight   185 #> 142   20    12    1   weight   195 #> 143   21    12    1   weight   205 #> 144    0    13    1   weight    41 #> 145    2    13    1   weight    48 #> 146    4    13    1   weight    53 #> 147    6    13    1   weight    60 #> 148    8    13    1   weight    65 #> 149   10    13    1   weight    67 #> 150   12    13    1   weight    71 #> 151   14    13    1   weight    70 #> 152   16    13    1   weight    71 #> 153   18    13    1   weight    81 #> 154   20    13    1   weight    91 #> 155   21    13    1   weight    96 #> 156    0    14    1   weight    41 #> 157    2    14    1   weight    49 #> 158    4    14    1   weight    62 #> 159    6    14    1   weight    79 #> 160    8    14    1   weight   101 #> 161   10    14    1   weight   128 #> 162   12    14    1   weight   164 #> 163   14    14    1   weight   192 #> 164   16    14    1   weight   227 #> 165   18    14    1   weight   248 #> 166   20    14    1   weight   259 #> 167   21    14    1   weight   266 #> 168    0    15    1   weight    41 #> 169    2    15    1   weight    49 #> 170    4    15    1   weight    56 #> 171    6    15    1   weight    64 #> 172    8    15    1   weight    68 #> 173   10    15    1   weight    68 #> 174   12    15    1   weight    67 #> 175   14    15    1   weight    68 #> 176    0    16    1   weight    41 #> 177    2    16    1   weight    45 #> 178    4    16    1   weight    49 #> 179    6    16    1   weight    51 #> 180    8    16    1   weight    57 #> 181   10    16    1   weight    51 #> 182   12    16    1   weight    54 #> 183    0    17    1   weight    42 #> 184    2    17    1   weight    51 #> 185    4    17    1   weight    61 #> 186    6    17    1   weight    72 #> 187    8    17    1   weight    83 #> 188   10    17    1   weight    89 #> 189   12    17    1   weight    98 #> 190   14    17    1   weight   103 #> 191   16    17    1   weight   113 #> 192   18    17    1   weight   123 #> 193   20    17    1   weight   133 #> 194   21    17    1   weight   142 #> 195    0    18    1   weight    39 #> 196    2    18    1   weight    35 #> 197    0    19    1   weight    43 #> 198    2    19    1   weight    48 #> 199    4    19    1   weight    55 #> 200    6    19    1   weight    62 #> 201    8    19    1   weight    65 #> 202   10    19    1   weight    71 #> 203   12    19    1   weight    82 #> 204   14    19    1   weight    88 #> 205   16    19    1   weight   106 #> 206   18    19    1   weight   120 #> 207   20    19    1   weight   144 #> 208   21    19    1   weight   157 #> 209    0    20    1   weight    41 #> 210    2    20    1   weight    47 #> 211    4    20    1   weight    54 #> 212    6    20    1   weight    58 #> 213    8    20    1   weight    65 #> 214   10    20    1   weight    73 #> 215   12    20    1   weight    77 #> 216   14    20    1   weight    89 #> 217   16    20    1   weight    98 #> 218   18    20    1   weight   107 #> 219   20    20    1   weight   115 #> 220   21    20    1   weight   117 #> 221    0    21    2   weight    40 #> 222    2    21    2   weight    50 #> 223    4    21    2   weight    62 #> 224    6    21    2   weight    86 #> 225    8    21    2   weight   125 #> 226   10    21    2   weight   163 #> 227   12    21    2   weight   217 #> 228   14    21    2   weight   240 #> 229   16    21    2   weight   275 #> 230   18    21    2   weight   307 #> 231   20    21    2   weight   318 #> 232   21    21    2   weight   331 #> 233    0    22    2   weight    41 #> 234    2    22    2   weight    55 #> 235    4    22    2   weight    64 #> 236    6    22    2   weight    77 #> 237    8    22    2   weight    90 #> 238   10    22    2   weight    95 #> 239   12    22    2   weight   108 #> 240   14    22    2   weight   111 #> 241   16    22    2   weight   131 #> 242   18    22    2   weight   148 #> 243   20    22    2   weight   164 #> 244   21    22    2   weight   167 #> 245    0    23    2   weight    43 #> 246    2    23    2   weight    52 #> 247    4    23    2   weight    61 #> 248    6    23    2   weight    73 #> 249    8    23    2   weight    90 #> 250   10    23    2   weight   103 #> 251   12    23    2   weight   127 #> 252   14    23    2   weight   135 #> 253   16    23    2   weight   145 #> 254   18    23    2   weight   163 #> 255   20    23    2   weight   170 #> 256   21    23    2   weight   175 #> 257    0    24    2   weight    42 #> 258    2    24    2   weight    52 #> 259    4    24    2   weight    58 #> 260    6    24    2   weight    74 #> 261    8    24    2   weight    66 #> 262   10    24    2   weight    68 #> 263   12    24    2   weight    70 #> 264   14    24    2   weight    71 #> 265   16    24    2   weight    72 #> 266   18    24    2   weight    72 #> 267   20    24    2   weight    76 #> 268   21    24    2   weight    74 #> 269    0    25    2   weight    40 #> 270    2    25    2   weight    49 #> 271    4    25    2   weight    62 #> 272    6    25    2   weight    78 #> 273    8    25    2   weight   102 #> 274   10    25    2   weight   124 #> 275   12    25    2   weight   146 #> 276   14    25    2   weight   164 #> 277   16    25    2   weight   197 #> 278   18    25    2   weight   231 #> 279   20    25    2   weight   259 #> 280   21    25    2   weight   265 #> 281    0    26    2   weight    42 #> 282    2    26    2   weight    48 #> 283    4    26    2   weight    57 #> 284    6    26    2   weight    74 #> 285    8    26    2   weight    93 #> 286   10    26    2   weight   114 #> 287   12    26    2   weight   136 #> 288   14    26    2   weight   147 #> 289   16    26    2   weight   169 #> 290   18    26    2   weight   205 #> 291   20    26    2   weight   236 #> 292   21    26    2   weight   251 #> 293    0    27    2   weight    39 #> 294    2    27    2   weight    46 #> 295    4    27    2   weight    58 #> 296    6    27    2   weight    73 #> 297    8    27    2   weight    87 #> 298   10    27    2   weight   100 #> 299   12    27    2   weight   115 #> 300   14    27    2   weight   123 #> 301   16    27    2   weight   144 #> 302   18    27    2   weight   163 #> 303   20    27    2   weight   185 #> 304   21    27    2   weight   192 #> 305    0    28    2   weight    39 #> 306    2    28    2   weight    46 #> 307    4    28    2   weight    58 #> 308    6    28    2   weight    73 #> 309    8    28    2   weight    92 #> 310   10    28    2   weight   114 #> 311   12    28    2   weight   145 #> 312   14    28    2   weight   156 #> 313   16    28    2   weight   184 #> 314   18    28    2   weight   207 #> 315   20    28    2   weight   212 #> 316   21    28    2   weight   233 #> 317    0    29    2   weight    39 #> 318    2    29    2   weight    48 #> 319    4    29    2   weight    59 #> 320    6    29    2   weight    74 #> 321    8    29    2   weight    87 #> 322   10    29    2   weight   106 #> 323   12    29    2   weight   134 #> 324   14    29    2   weight   150 #> 325   16    29    2   weight   187 #> 326   18    29    2   weight   230 #> 327   20    29    2   weight   279 #> 328   21    29    2   weight   309 #> 329    0    30    2   weight    42 #> 330    2    30    2   weight    48 #> 331    4    30    2   weight    59 #> 332    6    30    2   weight    72 #> 333    8    30    2   weight    85 #> 334   10    30    2   weight    98 #> 335   12    30    2   weight   115 #> 336   14    30    2   weight   122 #> 337   16    30    2   weight   143 #> 338   18    30    2   weight   151 #> 339   20    30    2   weight   157 #> 340   21    30    2   weight   150 #> 341    0    31    3   weight    42 #> 342    2    31    3   weight    53 #> 343    4    31    3   weight    62 #> 344    6    31    3   weight    73 #> 345    8    31    3   weight    85 #> 346   10    31    3   weight   102 #> 347   12    31    3   weight   123 #> 348   14    31    3   weight   138 #> 349   16    31    3   weight   170 #> 350   18    31    3   weight   204 #> 351   20    31    3   weight   235 #> 352   21    31    3   weight   256 #> 353    0    32    3   weight    41 #> 354    2    32    3   weight    49 #> 355    4    32    3   weight    65 #> 356    6    32    3   weight    82 #> 357    8    32    3   weight   107 #> 358   10    32    3   weight   129 #> 359   12    32    3   weight   159 #> 360   14    32    3   weight   179 #> 361   16    32    3   weight   221 #> 362   18    32    3   weight   263 #> 363   20    32    3   weight   291 #> 364   21    32    3   weight   305 #> 365    0    33    3   weight    39 #> 366    2    33    3   weight    50 #> 367    4    33    3   weight    63 #> 368    6    33    3   weight    77 #> 369    8    33    3   weight    96 #> 370   10    33    3   weight   111 #> 371   12    33    3   weight   137 #> 372   14    33    3   weight   144 #> 373   16    33    3   weight   151 #> 374   18    33    3   weight   146 #> 375   20    33    3   weight   156 #> 376   21    33    3   weight   147 #> 377    0    34    3   weight    41 #> 378    2    34    3   weight    49 #> 379    4    34    3   weight    63 #> 380    6    34    3   weight    85 #> 381    8    34    3   weight   107 #> 382   10    34    3   weight   134 #> 383   12    34    3   weight   164 #> 384   14    34    3   weight   186 #> 385   16    34    3   weight   235 #> 386   18    34    3   weight   294 #> 387   20    34    3   weight   327 #> 388   21    34    3   weight   341 #> 389    0    35    3   weight    41 #> 390    2    35    3   weight    53 #> 391    4    35    3   weight    64 #> 392    6    35    3   weight    87 #> 393    8    35    3   weight   123 #> 394   10    35    3   weight   158 #> 395   12    35    3   weight   201 #> 396   14    35    3   weight   238 #> 397   16    35    3   weight   287 #> 398   18    35    3   weight   332 #> 399   20    35    3   weight   361 #> 400   21    35    3   weight   373 #> 401    0    36    3   weight    39 #> 402    2    36    3   weight    48 #> 403    4    36    3   weight    61 #> 404    6    36    3   weight    76 #> 405    8    36    3   weight    98 #> 406   10    36    3   weight   116 #> 407   12    36    3   weight   145 #> 408   14    36    3   weight   166 #> 409   16    36    3   weight   198 #> 410   18    36    3   weight   227 #> 411   20    36    3   weight   225 #> 412   21    36    3   weight   220 #> 413    0    37    3   weight    41 #> 414    2    37    3   weight    48 #> 415    4    37    3   weight    56 #> 416    6    37    3   weight    68 #> 417    8    37    3   weight    80 #> 418   10    37    3   weight    83 #> 419   12    37    3   weight   103 #> 420   14    37    3   weight   112 #> 421   16    37    3   weight   135 #> 422   18    37    3   weight   157 #> 423   20    37    3   weight   169 #> 424   21    37    3   weight   178 #> 425    0    38    3   weight    41 #> 426    2    38    3   weight    49 #> 427    4    38    3   weight    61 #> 428    6    38    3   weight    74 #> 429    8    38    3   weight    98 #> 430   10    38    3   weight   109 #> 431   12    38    3   weight   128 #> 432   14    38    3   weight   154 #> 433   16    38    3   weight   192 #> 434   18    38    3   weight   232 #> 435   20    38    3   weight   280 #> 436   21    38    3   weight   290 #> 437    0    39    3   weight    42 #> 438    2    39    3   weight    50 #> 439    4    39    3   weight    61 #> 440    6    39    3   weight    78 #> 441    8    39    3   weight    89 #> 442   10    39    3   weight   109 #> 443   12    39    3   weight   130 #> 444   14    39    3   weight   146 #> 445   16    39    3   weight   170 #> 446   18    39    3   weight   214 #> 447   20    39    3   weight   250 #> 448   21    39    3   weight   272 #> 449    0    40    3   weight    41 #> 450    2    40    3   weight    55 #> 451    4    40    3   weight    66 #> 452    6    40    3   weight    79 #> 453    8    40    3   weight   101 #> 454   10    40    3   weight   120 #> 455   12    40    3   weight   154 #> 456   14    40    3   weight   182 #> 457   16    40    3   weight   215 #> 458   18    40    3   weight   262 #> 459   20    40    3   weight   295 #> 460   21    40    3   weight   321 #> 461    0    41    4   weight    42 #> 462    2    41    4   weight    51 #> 463    4    41    4   weight    66 #> 464    6    41    4   weight    85 #> 465    8    41    4   weight   103 #> 466   10    41    4   weight   124 #> 467   12    41    4   weight   155 #> 468   14    41    4   weight   153 #> 469   16    41    4   weight   175 #> 470   18    41    4   weight   184 #> 471   20    41    4   weight   199 #> 472   21    41    4   weight   204 #> 473    0    42    4   weight    42 #> 474    2    42    4   weight    49 #> 475    4    42    4   weight    63 #> 476    6    42    4   weight    84 #> 477    8    42    4   weight   103 #> 478   10    42    4   weight   126 #> 479   12    42    4   weight   160 #> 480   14    42    4   weight   174 #> 481   16    42    4   weight   204 #> 482   18    42    4   weight   234 #> 483   20    42    4   weight   269 #> 484   21    42    4   weight   281 #> 485    0    43    4   weight    42 #> 486    2    43    4   weight    55 #> 487    4    43    4   weight    69 #> 488    6    43    4   weight    96 #> 489    8    43    4   weight   131 #> 490   10    43    4   weight   157 #> 491   12    43    4   weight   184 #> 492   14    43    4   weight   188 #> 493   16    43    4   weight   197 #> 494   18    43    4   weight   198 #> 495   20    43    4   weight   199 #> 496   21    43    4   weight   200 #> 497    0    44    4   weight    42 #> 498    2    44    4   weight    51 #> 499    4    44    4   weight    65 #> 500    6    44    4   weight    86 #> 501    8    44    4   weight   103 #> 502   10    44    4   weight   118 #> 503   12    44    4   weight   127 #> 504   14    44    4   weight   138 #> 505   16    44    4   weight   145 #> 506   18    44    4   weight   146 #> 507    0    45    4   weight    41 #> 508    2    45    4   weight    50 #> 509    4    45    4   weight    61 #> 510    6    45    4   weight    78 #> 511    8    45    4   weight    98 #> 512   10    45    4   weight   117 #> 513   12    45    4   weight   135 #> 514   14    45    4   weight   141 #> 515   16    45    4   weight   147 #> 516   18    45    4   weight   174 #> 517   20    45    4   weight   197 #> 518   21    45    4   weight   196 #> 519    0    46    4   weight    40 #> 520    2    46    4   weight    52 #> 521    4    46    4   weight    62 #> 522    6    46    4   weight    82 #> 523    8    46    4   weight   101 #> 524   10    46    4   weight   120 #> 525   12    46    4   weight   144 #> 526   14    46    4   weight   156 #> 527   16    46    4   weight   173 #> 528   18    46    4   weight   210 #> 529   20    46    4   weight   231 #> 530   21    46    4   weight   238 #> 531    0    47    4   weight    41 #> 532    2    47    4   weight    53 #> 533    4    47    4   weight    66 #> 534    6    47    4   weight    79 #> 535    8    47    4   weight   100 #> 536   10    47    4   weight   123 #> 537   12    47    4   weight   148 #> 538   14    47    4   weight   157 #> 539   16    47    4   weight   168 #> 540   18    47    4   weight   185 #> 541   20    47    4   weight   210 #> 542   21    47    4   weight   205 #> 543    0    48    4   weight    39 #> 544    2    48    4   weight    50 #> 545    4    48    4   weight    62 #> 546    6    48    4   weight    80 #> 547    8    48    4   weight   104 #> 548   10    48    4   weight   125 #> 549   12    48    4   weight   154 #> 550   14    48    4   weight   170 #> 551   16    48    4   weight   222 #> 552   18    48    4   weight   261 #> 553   20    48    4   weight   303 #> 554   21    48    4   weight   322 #> 555    0    49    4   weight    40 #> 556    2    49    4   weight    53 #> 557    4    49    4   weight    64 #> 558    6    49    4   weight    85 #> 559    8    49    4   weight   108 #> 560   10    49    4   weight   128 #> 561   12    49    4   weight   152 #> 562   14    49    4   weight   166 #> 563   16    49    4   weight   184 #> 564   18    49    4   weight   203 #> 565   20    49    4   weight   233 #> 566   21    49    4   weight   237 #> 567    0    50    4   weight    41 #> 568    2    50    4   weight    54 #> 569    4    50    4   weight    67 #> 570    6    50    4   weight    84 #> 571    8    50    4   weight   105 #> 572   10    50    4   weight   122 #> 573   12    50    4   weight   155 #> 574   14    50    4   weight   175 #> 575   16    50    4   weight   205 #> 576   18    50    4   weight   234 #> 577   20    50    4   weight   264 #> 578   21    50    4   weight   264"},{"path":"/reference/melt.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Melt a vector.\r\nFor vectors, makes a column of a data frame — melt.default","title":"Melt a vector.\r\nFor vectors, makes a column of a data frame — melt.default","text":"Melt vector. vectors, makes column data frame","code":""},{"path":"/reference/melt.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Melt a vector.\r\nFor vectors, makes a column of a data frame — melt.default","text":"","code":"# S3 method for default melt(data, ..., na.rm = FALSE, value.name = \"value\")"},{"path":"/reference/melt.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Melt a vector.\r\nFor vectors, makes a column of a data frame — melt.default","text":"data vector melt ... arguments passed methods. na.rm NA values removed data set? convert explicit missings implicit missings. value.name name variable used store values","code":""},{"path":[]},{"path":"/reference/melt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a molten data frame. — melt","title":"Convert an object into a molten data frame. — melt","text":"generic melt function. See following functions details different data structures:","code":""},{"path":"/reference/melt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a molten data frame. — melt","text":"","code":"melt(data, ..., na.rm = FALSE, value.name = \"value\")"},{"path":"/reference/melt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a molten data frame. — melt","text":"data Data set melt ... arguments passed methods. na.rm NA values removed data set? convert explicit missings implicit missings. value.name name variable used store values","code":""},{"path":"/reference/melt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an object into a molten data frame. — melt","text":"melt.data.frame data.frames melt.array arrays, matrices tables melt.list lists","code":""},{"path":[]},{"path":"/reference/melt.list.html","id":null,"dir":"Reference","previous_headings":"","what":"Melt a list by recursively melting each component. — melt.list","title":"Melt a list by recursively melting each component. — melt.list","text":"Melt list recursively melting component.","code":""},{"path":"/reference/melt.list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Melt a list by recursively melting each component. — melt.list","text":"","code":"# S3 method for list melt(data, ..., level = 1)"},{"path":"/reference/melt.list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Melt a list by recursively melting each component. — melt.list","text":"data list recursively melt ... arguments passed methods. level list level - used creating labels","code":""},{"path":[]},{"path":"/reference/melt.list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Melt a list by recursively melting each component. — melt.list","text":"","code":"a <- as.list(c(1:4, NA)) melt(a) #>   value L1 #> 1     1  1 #> 2     2  2 #> 3     3  3 #> 4     4  4 #> 5    NA  5 names(a) <- letters[1:4] melt(a) #>   value   L1 #> 1     1    a #> 2     2    b #> 3     3    c #> 4     4    d #> 5    NA <NA> a <- list(matrix(1:4, ncol=2), matrix(1:6, ncol=2)) melt(a) #>    Var1 Var2 value L1 #> 1     1    1     1  1 #> 2     2    1     2  1 #> 3     1    2     3  1 #> 4     2    2     4  1 #> 5     1    1     1  2 #> 6     2    1     2  2 #> 7     3    1     3  2 #> 8     1    2     4  2 #> 9     2    2     5  2 #> 10    3    2     6  2 a <- list(matrix(1:4, ncol=2), array(1:27, c(3,3,3))) melt(a) #>    Var1 Var2 value Var3 L1 #> 1     1    1     1   NA  1 #> 2     2    1     2   NA  1 #> 3     1    2     3   NA  1 #> 4     2    2     4   NA  1 #> 5     1    1     1    1  2 #> 6     2    1     2    1  2 #> 7     3    1     3    1  2 #> 8     1    2     4    1  2 #> 9     2    2     5    1  2 #> 10    3    2     6    1  2 #> 11    1    3     7    1  2 #> 12    2    3     8    1  2 #> 13    3    3     9    1  2 #> 14    1    1    10    2  2 #> 15    2    1    11    2  2 #> 16    3    1    12    2  2 #> 17    1    2    13    2  2 #> 18    2    2    14    2  2 #> 19    3    2    15    2  2 #> 20    1    3    16    2  2 #> 21    2    3    17    2  2 #> 22    3    3    18    2  2 #> 23    1    1    19    3  2 #> 24    2    1    20    3  2 #> 25    3    1    21    3  2 #> 26    1    2    22    3  2 #> 27    2    2    23    3  2 #> 28    3    2    24    3  2 #> 29    1    3    25    3  2 #> 30    2    3    26    3  2 #> 31    3    3    27    3  2 melt(list(1:5, matrix(1:4, ncol=2))) #>   value Var1 Var2 L1 #> 1     1   NA   NA  1 #> 2     2   NA   NA  1 #> 3     3   NA   NA  1 #> 4     4   NA   NA  1 #> 5     5   NA   NA  1 #> 6     1    1    1  2 #> 7     2    2    1  2 #> 8     3    1    2  2 #> 9     4    2    2  2 melt(list(list(1:3), 1, list(as.list(3:4), as.list(1:2)))) #>   value L2 L3 L1 #> 1     1  1 NA  1 #> 2     2  1 NA  1 #> 3     3  1 NA  1 #> 4     1 NA NA  2 #> 5     3  1  1  3 #> 6     4  1  2  3 #> 7     1  2  1  3 #> 8     2  2  2  3"},{"path":"/reference/melt_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that input variables to melt are appropriate. — melt_check","title":"Check that input variables to melt are appropriate. — melt_check","text":"id.vars measure.vars missing, melt_check best impute . supply one id.vars measure.vars, melt assume remainder variables data set belong . supply neither, melt assume discrete variables id variables measured.","code":""},{"path":"/reference/melt_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that input variables to melt are appropriate. — melt_check","text":"","code":"melt_check(data, id.vars, measure.vars, variable.name, value.name)"},{"path":"/reference/melt_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that input variables to melt are appropriate. — melt_check","text":"data data frame id.vars vector identifying variable names indexes measure.vars vector Measured variable names indexes variable.name name variable used store measured variable names value.name name variable used store values","code":""},{"path":"/reference/melt_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that input variables to melt are appropriate. — melt_check","text":"list giving id measure variables names.","code":""},{"path":"/reference/parse_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse casting formulae. — parse_formula","title":"Parse casting formulae. — parse_formula","text":"two ways specify casting formula: either string, list quoted variables. function converts former latter.","code":""},{"path":"/reference/parse_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse casting formulae. — parse_formula","text":"","code":"parse_formula(formula = \"...  ~ variable\", varnames, value.var = \"value\")"},{"path":"/reference/parse_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse casting formulae. — parse_formula","text":"formula formula parse varnames names variables data value.var name variable containing values","code":""},{"path":"/reference/parse_formula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse casting formulae. — parse_formula","text":"Casting formulas separate dimensions ~ variables within dimension + *. . can used placeholder, ... represents variables otherwise used.","code":""},{"path":"/reference/parse_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse casting formulae. — parse_formula","text":"","code":"reshape2:::parse_formula(\"a + ...\", letters[1:6]) #> [[1]] #> List of 6 #>  $ a: symbol a #>  $ b: symbol b #>  $ c: symbol c #>  $ d: symbol d #>  $ e: symbol e #>  $ f: symbol f #>  - attr(*, \"env\")=<environment: 0x0000018fbe3e4318>  #>  - attr(*, \"class\")= chr \"quoted\" #>  reshape2:::parse_formula(\"a ~ b + d\") #> [[1]] #> List of 1 #>  $ a: symbol a #>  - attr(*, \"env\")=<environment: 0x0000018fbe69bb18>  #>  - attr(*, \"class\")= chr \"quoted\" #>  #> [[2]] #> List of 2 #>  $ b: symbol b #>  $ d: symbol d #>  - attr(*, \"env\")=<environment: 0x0000018fbe69bb18>  #>  - attr(*, \"class\")= chr \"quoted\" #>  reshape2:::parse_formula(\"a + b ~ c ~ .\") #> [[1]] #> List of 2 #>  $ a: symbol a #>  $ b: symbol b #>  - attr(*, \"env\")=<environment: 0x0000018fbe9af210>  #>  - attr(*, \"class\")= chr \"quoted\" #>  #> [[2]] #> List of 1 #>  $ c: symbol c #>  - attr(*, \"env\")=<environment: 0x0000018fbe9af210>  #>  - attr(*, \"class\")= chr \"quoted\" #>  #> [[3]] #>  list() #>  - attr(*, \"env\")=<environment: 0x0000018fbe9af210>  #>  - attr(*, \"class\")= chr \"quoted\" #>"},{"path":"/reference/recast.html","id":null,"dir":"Reference","previous_headings":"","what":"Recast: melt and cast in a single step — recast","title":"Recast: melt and cast in a single step — recast","text":"conveniently wraps melting (d)casting data frame single step.","code":""},{"path":"/reference/recast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recast: melt and cast in a single step — recast","text":"","code":"recast(data, formula, ..., id.var, measure.var)"},{"path":"/reference/recast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recast: melt and cast in a single step — recast","text":"data data set melt formula casting formula, see dcast specifics ... arguments passed dcast id.var identifying variables. blank, use non measure.var variables measure.var measured variables. blank, use non id.var variables","code":""},{"path":[]},{"path":"/reference/recast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recast: melt and cast in a single step — recast","text":"","code":"recast(french_fries, time ~ variable, id.var = 1:4) #> Aggregation function missing: defaulting to length #>    time potato buttery grassy rancid painty #> 1     1     72      72     72     72     72 #> 2     2     72      72     72     72     72 #> 3     3     72      72     72     72     72 #> 4     4     72      72     72     72     72 #> 5     5     72      72     72     72     72 #> 6     6     72      72     72     72     72 #> 7     7     72      72     72     72     72 #> 8     8     72      72     72     72     72 #> 9     9     60      60     60     60     60 #> 10   10     60      60     60     60     60"},{"path":"/reference/smiths.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo data describing the Smiths. — smiths","title":"Demo data describing the Smiths. — smiths","text":"small demo dataset describing John Mary Smith.  Used introductory vignette.","code":""},{"path":"/reference/smiths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demo data describing the Smiths. — smiths","text":"","code":"smiths"},{"path":"/reference/smiths.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demo data describing the Smiths. — smiths","text":"data frame 2 rows 5 variables","code":""},{"path":"/reference/tips.html","id":null,"dir":"Reference","previous_headings":"","what":"Tipping data — tips","title":"Tipping data — tips","text":"One waiter recorded information tip received period months working one restaurant. collected several variables:","code":""},{"path":"/reference/tips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tipping data — tips","text":"","code":"tips"},{"path":"/reference/tips.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tipping data — tips","text":"data frame 244 rows 7 variables","code":""},{"path":"/reference/tips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tipping data — tips","text":"tip dollars, bill dollars, sex bill payer, whether smokers party, day week, time day, size party. recorded 244 tips. data reported collection case studies business statistics (Bryant & Smith 1995).","code":""},{"path":"/reference/tips.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tipping data — tips","text":"Bryant, P. G. Smith, M (1995) Practical Data   Analysis: Case Studies Business Statistics.  Homewood, IL: Richard D.   Irwin Publishing:","code":""},{"path":[]},{"path":"/news/index.html","id":"reshape2-144","dir":"Changelog","previous_headings":"","what":"reshape2 1.4.4","title":"reshape2 1.4.4","text":"CRAN release: 2020-04-09 Fix R CMD check failure R-devel.","code":""},{"path":"/news/index.html","id":"version-143","dir":"Changelog","previous_headings":"","what":"Version 1.4.3","title":"Version 1.4.3","text":"CRAN release: 2017-12-11 Fix C/C++ problems causing R CMD CHECK errors. melt.data.frame() throws encountering objects type POSIXlt, requests conversion (much saner) POSIXct type.","code":""},{"path":"/news/index.html","id":"version-142","dir":"Changelog","previous_headings":"","what":"Version 1.4.2","title":"Version 1.4.2","text":"CRAN release: 2016-10-22 Minor R CMD check fixes CRAN.","code":""},{"path":"/news/index.html","id":"version-141","dir":"Changelog","previous_headings":"","what":"Version 1.4.1","title":"Version 1.4.1","text":"CRAN release: 2014-12-06 melt.data.frame() now properly sets OBJECT bit value variable generated attributes copied (example, multiple POSIXct columns concatenated generate value variable) (#50) melt.data.frame() can melt data.frames containing list elements id columns. (#49) melt.data.frame() longer errors measure.vars NULL empty. (#46)","code":""},{"path":"/news/index.html","id":"version-14","dir":"Changelog","previous_headings":"","what":"Version 1.4","title":"Version 1.4","text":"CRAN release: 2014-04-23 dcast() acast() gain useful error message use value_var intead value.var (#16), value.var doesn’t exist (#9). also work better . specifications like . ~ . x + y ~ . melt.array() creates factor variables levels order original rownames (#19) melt.data.frame() gains internal Rcpp / C++ implementation, now many orders magnitudes faster. also preserves identical attributes measure variables, now throws warning dropped. (Thanks Kevin Ushey) melt.data.frame() gains factorsAsStrings argument controls whether factors converted character melted measure variables. TRUE default backward compatibility. melt.array() gains .argument can used prevent dimnames converted type.convert() recast() now returns data frame instead list (#45).","code":""},{"path":"/news/index.html","id":"version-122","dir":"Changelog","previous_headings":"","what":"Version 1.2.2","title":"Version 1.2.2","text":"CRAN release: 2012-12-04 Fix incompatibility plyr 1.8 Fix evaluation bug revealed knitr. (Fixes #18) Fixed bug melt didn’t automatically get variable names used tables. (Thanks Winston Chang)","code":""},{"path":"/news/index.html","id":"version-121","dir":"Changelog","previous_headings":"","what":"Version 1.2.1","title":"Version 1.2.1","text":"CRAN release: 2012-01-10 Fix bug multiple margins revealed plyr 1.7, caused mis-use data frame subsetting.","code":""},{"path":"/news/index.html","id":"version-12","dir":"Changelog","previous_headings":"","what":"Version 1.2","title":"Version 1.2","text":"CRAN release: 2011-11-18 Fixed bug melt factors converted integers, instead characters measured variable factor, dcast now converts character rather throwing error. acast still returns factor matrix. (Thanks Brian Diggs.) acast now much faster, due fixing slow way naming output. (Thanks José Bartolomei Díaz bug report) value_var argument acast dcast renamed value.var consistent argument names Order NA factor levels () creating margins Corrected reshape citation.","code":""},{"path":"/news/index.html","id":"version-11","dir":"Changelog","previous_headings":"","what":"Version 1.1","title":"Version 1.1","text":"CRAN release: 2011-01-04 melt.data.frame longer turns characters factors melt methods gain na.rm value.name arguments - previously possessed melt.data.frame (Fixes #5)","code":""}]
